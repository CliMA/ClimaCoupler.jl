var documenterSearchIndex = {"docs":
[{"location":"checkpointer/#Checkpointer","page":"Checkpointer","title":"Checkpointer","text":"","category":"section"},{"location":"checkpointer/","page":"Checkpointer","title":"Checkpointer","text":"This module contains general functions for logging the model states and restarting simulations. The Checkpointer uses ClimaCore.InputOutput infrastructure, which allows it to handle arbitrarily distributed logging and restart setups.","category":"page"},{"location":"checkpointer/#Checkpointer-API","page":"Checkpointer","title":"Checkpointer API","text":"","category":"section"},{"location":"checkpointer/","page":"Checkpointer","title":"Checkpointer","text":"    ClimaCoupler.Checkpointer.get_model_prog_state\n    ClimaCoupler.Checkpointer.restart_model_state!\n    ClimaCoupler.Checkpointer.checkpoint_model_state\n    ClimaCoupler.Checkpointer.checkpoint_sims","category":"page"},{"location":"checkpointer/#ClimaCoupler.Checkpointer.get_model_prog_state","page":"Checkpointer","title":"ClimaCoupler.Checkpointer.get_model_prog_state","text":"get_model_prog_state(sim::Interfacer.ComponentModelSimulation)\n\nReturns the model state of a simulation as a ClimaCore.FieldVector. This is a template function that should be implemented for each component model.\n\n\n\n\n\n","category":"function"},{"location":"checkpointer/#ClimaCoupler.Checkpointer.restart_model_state!","page":"Checkpointer","title":"ClimaCoupler.Checkpointer.restart_model_state!","text":"restart_model_state!(sim::Interfacer.ComponentModelSimulation, comms_ctx::ClimaComms.AbstractCommsContext, t::Int; input_dir = \"input\")\n\nSets the model state of a simulation from a HDF5 file from a given time, t (in seconds).\n\n\n\n\n\n","category":"function"},{"location":"checkpointer/#ClimaCoupler.Checkpointer.checkpoint_model_state","page":"Checkpointer","title":"ClimaCoupler.Checkpointer.checkpoint_model_state","text":"checkpoint_model_state(sim::Interfacer.ComponentModelSimulation, comms_ctx::ClimaComms.AbstractCommsContext, t::Int; output_dir = \"output\")\n\nCheckpoints the model state of a simulation to a HDF5 file at a given time, t (in seconds).\n\n\n\n\n\n","category":"function"},{"location":"checkpointer/#ClimaCoupler.Checkpointer.checkpoint_sims","page":"Checkpointer","title":"ClimaCoupler.Checkpointer.checkpoint_sims","text":"checkpoint_sims(cs::CoupledSimulation)\n\nThis is a callback function that checkpoints all simulations defined in the current coupled simulation.\n\n\n\n\n\n","category":"function"},{"location":"fieldexchanger/#FieldExchanger","page":"FieldExchanger","title":"FieldExchanger","text":"","category":"section"},{"location":"fieldexchanger/","page":"FieldExchanger","title":"FieldExchanger","text":"This module contains general functions for the exchange of fields between the atmospheric and surface component models.","category":"page"},{"location":"fieldexchanger/","page":"FieldExchanger","title":"FieldExchanger","text":"The FieldExchanger needs to populate the coupler with","category":"page"},{"location":"fieldexchanger/","page":"FieldExchanger","title":"FieldExchanger","text":"atmospheric fields (mostly fluxes), via the import_atmos_fields! function\naverage surface properties of each coupler gridpoint, via the import_combined_surface_fields! function","category":"page"},{"location":"fieldexchanger/","page":"FieldExchanger","title":"FieldExchanger","text":"The component models are updated by broadcasting the coupler fields, via the update_model_sims! function. For an update, this function requires that update_field! is defined for the particular variable and component model. Currently, we support the:","category":"page"},{"location":"fieldexchanger/","page":"FieldExchanger","title":"FieldExchanger","text":"AtmosModelSimulation: albedo, surface_temperature\nif calculating fluxes in the atmospheric model: roughness_momentum, roughness_buoyancy, beta\nSurfaceModelSimulation: air_density, turbulent_energy_flux, turbulent_moisture_flux, radiative_energy_flux_sfc, liquid_precipitation, snow_precipitation","category":"page"},{"location":"fieldexchanger/","page":"FieldExchanger","title":"FieldExchanger","text":"If an update_field! function is not defined for a particular component model, it will be ignored.","category":"page"},{"location":"fieldexchanger/#FieldExchanger-API","page":"FieldExchanger","title":"FieldExchanger API","text":"","category":"section"},{"location":"fieldexchanger/","page":"FieldExchanger","title":"FieldExchanger","text":"    ClimaCoupler.FieldExchanger.import_atmos_fields!\n    ClimaCoupler.FieldExchanger.import_combined_surface_fields!\n    ClimaCoupler.FieldExchanger.update_model_sims!\n    ClimaCoupler.FieldExchanger.update_sim!\n    ClimaCoupler.FieldExchanger.reinit_model_sims!\n    ClimaCoupler.FieldExchanger.step_model_sims!\n    ClimaCoupler.FieldExchanger.update_surface_fractions!","category":"page"},{"location":"fieldexchanger/#ClimaCoupler.FieldExchanger.import_atmos_fields!","page":"FieldExchanger","title":"ClimaCoupler.FieldExchanger.import_atmos_fields!","text":"import_atmos_fields!(csf, model_sims, boundary_space, turbulent_fluxes)\n\nUpdates the coupler with the atmospheric fluxes. The Interfacer.get_field functions (:turbulent_energy_flux, :turbulent_moisture_flux, :radiative_energy_flux_sfc, :liquid_precipitation, :snow_precipitation) have to be defined for the amtospheric component model type.\n\nArguments\n\ncsf: [NamedTuple] containing coupler fields.\nmodel_sims: [NamedTuple] containing ComponentModelSimulations.\nboundary_space: [Spaces.AbstractSpace] the space of the coupler surface.\nturbulent_fluxes: [TurbulentFluxPartition] denotes a flag for turbulent flux calculation.\n\n\n\n\n\n","category":"function"},{"location":"fieldexchanger/#ClimaCoupler.FieldExchanger.import_combined_surface_fields!","page":"FieldExchanger","title":"ClimaCoupler.FieldExchanger.import_combined_surface_fields!","text":"import_combined_surface_fields!(csf, model_sims, turbulent_fluxes)\n\nUpdates the coupler with the surface properties. The Interfacer.get_field functions for (:surface_temperature, :surface_direct_albedo, :surface_diffuse_albedo, :roughness_momentum, :roughness_buoyancy, :beta) need to be specified for each surface model.\n\nArguments\n\ncsf: [NamedTuple] containing coupler fields.\nmodel_sims: [NamedTuple] containing ComponentModelSimulations.\nturbulent_fluxes: [TurbulentFluxPartition] denotes a flag for turbulent flux calculation.\n\n\n\n\n\n","category":"function"},{"location":"fieldexchanger/#ClimaCoupler.FieldExchanger.update_model_sims!","page":"FieldExchanger","title":"ClimaCoupler.FieldExchanger.update_model_sims!","text":"update_model_sims!(model_sims, csf, turbulent_fluxes)\n\nIterates update_sim! over all component model simulations saved in cs.model_sims.\n\nArguments\n\nmodel_sims: [NamedTuple] containing ComponentModelSimulations.\ncsf: [NamedTuple] containing coupler fields.\nturbulent_fluxes: [TurbulentFluxPartition] denotes a flag for turbulent flux calculation.\n\n\n\n\n\n","category":"function"},{"location":"fieldexchanger/#ClimaCoupler.FieldExchanger.update_sim!","page":"FieldExchanger","title":"ClimaCoupler.FieldExchanger.update_sim!","text":"update_sim!(atmos_sim::Interfacer.AtmosModelSimulation, csf)\n\nUpdates the surface fields for temperature, roughness length, albedo, and specific humidity.\n\nArguments\n\natmos_sim: [Interfacer.AtmosModelSimulation] containing an atmospheric model simulation object.\ncsf: [NamedTuple] containing coupler fields.\n\n\n\n\n\nupdate_sim!(sim::SurfaceModelSimulation, csf, area_fraction)\n\nUpdates the surface component model cache with the current coupler fields of Fturbenergy, Fradiative, Fturbmoisture, Pliq, and œÅ_sfc.\n\nArguments\n\nsim: [Interfacer.SurfaceModelSimulation] containing a surface model simulation object.\ncsf: [NamedTuple] containing coupler fields.\n\n\n\n\n\n","category":"function"},{"location":"fieldexchanger/#ClimaCoupler.FieldExchanger.reinit_model_sims!","page":"FieldExchanger","title":"ClimaCoupler.FieldExchanger.reinit_model_sims!","text":"reinit_model_sims!(model_sims)\n\nIterates reinit! over all component model simulations saved in cs.model_sims.\n\nArguments\n\nmodel_sims: [NamedTuple] containing ComponentModelSimulations.\n\n\n\n\n\n","category":"function"},{"location":"fieldexchanger/#ClimaCoupler.FieldExchanger.step_model_sims!","page":"FieldExchanger","title":"ClimaCoupler.FieldExchanger.step_model_sims!","text":"step_model_sims!(model_sims, t)\n\nIterates step! over all component model simulations saved in cs.model_sims.\n\nArguments\n\nmodel_sims: [NamedTuple] containing ComponentModelSimulations.\nt: [AbstractFloat] denoting the simulation time.\n\n\n\n\n\n","category":"function"},{"location":"fieldexchanger/#ClimaCoupler.FieldExchanger.update_surface_fractions!","page":"FieldExchanger","title":"ClimaCoupler.FieldExchanger.update_surface_fractions!","text":"update_surface_fractions!(cs::Interfacer.CoupledSimulation)\n\nUpdates dynamically changing area fractions. Maintains the invariant that the sum of area fractions is 1 at all points.\n\nArguments\n\ncs: [Interfacer.CoupledSimulation] containing area fraction information.\n\n\n\n\n\n","category":"function"},{"location":"fieldexchanger/#FieldExchanger-Internal-Functions","page":"FieldExchanger","title":"FieldExchanger Internal Functions","text":"","category":"section"},{"location":"fieldexchanger/","page":"FieldExchanger","title":"FieldExchanger","text":"    ClimaCoupler.FieldExchanger.combine_surfaces!\n    ClimaCoupler.FieldExchanger.dummmy_remap!\n    ClimaCoupler.FieldExchanger.nans_to_zero","category":"page"},{"location":"fieldexchanger/#ClimaCoupler.FieldExchanger.combine_surfaces!","page":"FieldExchanger","title":"ClimaCoupler.FieldExchanger.combine_surfaces!","text":"combine_surfaces!(combined_field::CC.Fields.Field, sims, field_name::Val)\n\nSums the fields, specified by field_name, weighted by the respective area fractions of all surface simulations. THe result is saved in combined_field.\n\nArguments\n\ncombined_field: [CC.Fields.Field] output object containing weighted values.\nsims: [NamedTuple] containing simulations .\nfield_name: [Val] containing the name Symbol of the field t be extracted by the Interfacer.get_field functions.\n\nExample\n\ncombine_surfaces!(temp_field, cs.model_sims, Val(:surface_temperature))\n\n\n\n\n\n","category":"function"},{"location":"fieldexchanger/#ClimaCoupler.FieldExchanger.dummmy_remap!","page":"FieldExchanger","title":"ClimaCoupler.FieldExchanger.dummmy_remap!","text":"dummmy_remap!(target, source)\n\nSimple stand-in function for remapping. For AMIP we don't need regridding of surface model CC.Fields. When we do, we re-introduce the ClimaCoreTempestRemap remapping functions.\n\nArguments\n\ntarget: [CC.Fields.Field] destination of remapping.\nsource: [CC.Fields.Field] source of remapping.\n\n\n\n\n\n","category":"function"},{"location":"fieldexchanger/#ClimaCoupler.FieldExchanger.nans_to_zero","page":"FieldExchanger","title":"ClimaCoupler.FieldExchanger.nans_to_zero","text":"nans_to_zero(v)\n\nReplaces NaNs with zeros, otherwise returns the value.\n\n\n\n\n\n","category":"function"},{"location":"utilities/#Utilities","page":"Utilities","title":"Utilities","text":"","category":"section"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"This module contains functions, objects, and constants used by various modules in the coupler.","category":"page"},{"location":"utilities/#Utilities-API","page":"Utilities","title":"Utilities API","text":"","category":"section"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"ClimaCoupler.Utilities.swap_space!\nClimaCoupler.Utilities.get_comms_context\nClimaCoupler.Utilities.get_device\nClimaCoupler.Utilities.show_memory_usage\nClimaCoupler.Utilities.setup_output_dirs\nClimaCoupler.Utilities.time_to_seconds\nClimaCoupler.Utilities.binary_mask","category":"page"},{"location":"utilities/#ClimaCoupler.Utilities.swap_space!","page":"Utilities","title":"ClimaCoupler.Utilities.swap_space!","text":"swap_space!(space_out::CC.Spaces.AbstractSpace, field_in::CC.Fields.Field)\n\nRemap the values of a field onto a new space.\n\nArguments\n\nspace_out: [CC.Spaces.AbstractSpace] The axes of the space we want to remap onto\nfield_in: [CC.Fields.Field] to be remapped to new space.\n\n\n\n\n\n","category":"function"},{"location":"utilities/#ClimaCoupler.Utilities.get_comms_context","page":"Utilities","title":"ClimaCoupler.Utilities.get_comms_context","text":"get_comms_context(config_dict)\n\nSets up the appropriate ClimaComms context for the device the model is to be run on, choosing from the following options:     - CPU single threaded     - CPU with MPI     - GPU\n\nIf no device is passed to ClimaComms.context() then ClimaComms automatically selects the device from which this code is called.\n\nArguments\n\nconfig_dict: dictionary containing a \"device\" flag which decides which device context is needed\n\n\n\n\n\n","category":"function"},{"location":"utilities/#ClimaCoupler.Utilities.get_device","page":"Utilities","title":"ClimaCoupler.Utilities.get_device","text":"get_device(config_dict)\n\nReturns the device on which the model is being run\n\nArguments\n\nconfig_dict: dictionary containing a \"device\" flag which decides which device to run on\n\n\n\n\n\n","category":"function"},{"location":"utilities/#ClimaCoupler.Utilities.show_memory_usage","page":"Utilities","title":"ClimaCoupler.Utilities.show_memory_usage","text":"show_memory_usage()\n\nDisplay and return the maximum resident set size (RSS) memory footprint on the CPU of this process since it began.\n\n\n\n\n\n","category":"function"},{"location":"utilities/#ClimaCoupler.Utilities.setup_output_dirs","page":"Utilities","title":"ClimaCoupler.Utilities.setup_output_dirs","text":"setup_output_dirs(; output_dir = nothing, artifacts_dir = nothing, comms_ctx)\n\nCreate output directories for the experiment. If comms_ctx is provided, only the root process will create the directories. By default, the regrid directory is created as a temporary directory inside the output directory, and the artifacts directory is created inside the output directory with the name artifacts/.\n\nClimaUtilities.OutputPathGenerator is used so that simulations can be re-run and re-started. The output path looks like:\n\ncoupler_output_dir_amip/\n‚îú‚îÄ‚îÄ checkpoints\n‚îÇ       ‚îî‚îÄ‚îÄ checkpoints for the various models\n‚îú‚îÄ‚îÄ artifacts\n‚îÇ       ‚îî‚îÄ‚îÄ plots produced by the postporcessing step\n‚îú‚îÄ‚îÄ output_0000/\n‚îÇ   ‚îú‚îÄ‚îÄ atmos/\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ output of the atmos model\n‚îÇ   ‚îî‚îÄ‚îÄ ocean/\n‚îÇ       ‚îî‚îÄ‚îÄ output of the ocean model\n‚îú‚îÄ‚îÄ output_0001/\n‚îÇ   ‚îî‚îÄ‚îÄ ... component model outputs in their folders ...\n‚îú‚îÄ‚îÄ output_0002/\n‚îÇ   ‚îî‚îÄ‚îÄ ... component model outputs in their folders ...\n‚îî‚îÄ‚îÄ output_active -> output_0002/\n\nArguments\n\noutput_dir::String: The directory where the output files will be stored. Default is the current directory.\nregrid_dir::String: The directory where the regridded files will be stored. Default is output_dir/regrid_tmp/.\ncheckpoint_dir::String: The directory where the checkpoint files will be stored. Default is output_dir/checkpoints/.\nartifacts_dir::String: The directory where the artifacts will be stored. Default is output_dir/artifacts/.\ncomms_ctx::Union{Nothing, ClimaComms.AbstractCommsContext}: The communicator context. If provided, only the root process will create the directories.\n\nReturns\n\nA tuple with the paths to the output, regrid, and artifacts directories.\n\n\n\n\n\n","category":"function"},{"location":"utilities/#ClimaCoupler.Utilities.time_to_seconds","page":"Utilities","title":"ClimaCoupler.Utilities.time_to_seconds","text":"time_to_seconds(s::String)\n\nConvert a string to seconds. The string should be in the format numberunit, where unit is one of secs, mins, hours, or days.\n\nArguments\n\ns::String: The string to convert to seconds.\n\nReturns\n\nThe number of seconds represented by the string.\n\n\n\n\n\n","category":"function"},{"location":"utilities/#ClimaCoupler.Utilities.binary_mask","page":"Utilities","title":"ClimaCoupler.Utilities.binary_mask","text":"binary_mask(var, threshold)\n\nConverts a number var to 1, if var is greater or equal than a given threshold value, or 0 otherwise, keeping the same type.\n\nArguments\n\nvar: [FT] value to be converted.\nthreshold: [FT] cutoff value for conversions.\n\n\n\n\n\nbinary_mask(var)\n\nConverts a number var to 1, if var is greater or equal than eps(FT), or 0 otherwise, keeping the same type.\n\nArguments\n\nvar: [FT] value to be converted.\n\n\n\n\n\n","category":"function"},{"location":"generated/sea_breeze/land_rhs/#Land-Model","page":"Land Model","title":"Land Model","text":"","category":"section"},{"location":"generated/sea_breeze/land_rhs/","page":"Land Model","title":"Land Model","text":"import DiffEqCallbacks\nimport SciMLBase\nimport ClimaCore as CC\nimport ClimaTimeSteppers as CTS","category":"page"},{"location":"generated/sea_breeze/land_rhs/","page":"Land Model","title":"Land Model","text":"Load coupled simulation code","category":"page"},{"location":"generated/sea_breeze/land_rhs/","page":"Land Model","title":"Land Model","text":"include(\"../CoupledSims/coupled_sim.jl\")","category":"page"},{"location":"generated/sea_breeze/land_rhs/#Slab-Land-ODE","page":"Land Model","title":"Slab Land ODE","text":"","category":"section"},{"location":"generated/sea_breeze/land_rhs/","page":"Land Model","title":"Land Model","text":"For our land component, we solve a simple slab land ODE:","category":"page"},{"location":"generated/sea_breeze/land_rhs/","page":"Land Model","title":"Land Model","text":"rho_l c_l H_l partial_t T_lnd = - F_integ  Delta t_coupler","category":"page"},{"location":"generated/sea_breeze/land_rhs/","page":"Land Model","title":"Land Model","text":"where rho_l = 1500 kg m ^-3, c_l=800 J K ^-1 kg ^-1, H_l=1 m are the density, specific heat and depth of the land slab,\nand F_integ is the integrated surface fluxes in time.","category":"page"},{"location":"generated/sea_breeze/land_rhs/#Model-Code","page":"Land Model","title":"Model Code","text":"","category":"section"},{"location":"generated/sea_breeze/land_rhs/","page":"Land Model","title":"Land Model","text":"function lnd_rhs!(du, u, (parameters, F_accumulated), t)\n    \"\"\"\n    Slab layer equation\n        d(T_lnd)/dt = - (F_accumulated + G) / (h_lnd * œÅ_lnd * c_lnd)\n        where\n            F_accumulated = F_integrated / Œît_coupler\n    \"\"\"\n    (; lnd_h, lnd_œÅ, lnd_c) = parameters\n    (; T_sfc) = du\n\n    @. T_sfc = (-F_accumulated) / (lnd_h * lnd_œÅ * lnd_c)\nend\n\n# set up domain\nfunction hspace_1D(xlim = (-œÄ, œÄ), npoly = 0, helem = 10)\n    FT = Float64\n\n    domain =\n        CC.Domains.IntervalDomain(CC.Geometry.XPoint{FT}(xlim[1]), CC.Geometry.XPoint{FT}(xlim[2]), periodic = true)\n    mesh = CC.Meshes.IntervalMesh(domain; nelems = helem)\n    topology = CC.Topologies.IntervalTopology(mesh)\n\n    # Finite Volume Approximation: Gauss-Lobatto with 1pt per element\n    quad = CC.Spaces.Quadratures.GL{npoly + 1}()\n    space = CC.Spaces.SpectralElementSpace1D(topology, quad)\n\n    return space\nend\n\n# init simulation\nfunction lnd_init(; xmin = -1000, xmax = 1000, helem = 20, npoly = 0)\n\n    # construct domain spaces - get only surface layer (NB: z should be zero, not z = first central height)\n    space = hspace_1D((xmin, xmax), npoly, helem)\n    coords = CC.Fields.coordinate_field(space)\n    domain = space\n\n    # initial condition\n    T_sfc = map(coords) do coord\n        T_sfc = 283.0\n    end\n\n    # prognostic variable\n    Y = CC.Fields.FieldVector(T_sfc = T_sfc)\n\n    return Y, domain\nend","category":"page"},{"location":"generated/sea_breeze/land_rhs/#Coupled-Land-Wrappers","page":"Land Model","title":"Coupled Land Wrappers","text":"","category":"section"},{"location":"generated/sea_breeze/land_rhs/","page":"Land Model","title":"Land Model","text":"# Land Simulation - later to live in ClimaLand\nstruct LandSim <: AbstractLandSim\n    integrator::Any\nend\n\nfunction LandSim(Y_init, t_start, dt, t_end, timestepper, p, saveat, callbacks = DiffEqCallbacks.CallbackSet())\n    ode_algo = CTS.ExplicitAlgorithm(timestepper)\n    ode_function = CTS.ClimaODEFunction(T_exp! = lnd_rhs!)\n\n    problem = SciMLBase.ODEProblem(ode_function, Y_init, (t_start, t_end), p)\n    lnd_integ = SciMLBase.init(problem, ode_algo, dt = dt, saveat = saveat, adaptive = false, callback = callbacks)\n\n    return LandSim(lnd_integ)\nend\n\nfunction coupler_push!(coupler::CouplerState, land::LandSim)\n    coupler_put!(coupler, :T_sfc_land, land.integrator.u.T_sfc, land)\nend\n\nfunction coupler_pull!(land::LandSim, coupler::CouplerState)\n    coupler_get!(land.integrator.p.F_sfc, coupler, :F_sfc, land)\n    land.integrator.p.F_sfc ./= coupler.Œît_coupled\nend","category":"page"},{"location":"generated/sea_breeze/land_rhs/","page":"Land Model","title":"Land Model","text":"","category":"page"},{"location":"generated/sea_breeze/land_rhs/","page":"Land Model","title":"Land Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"performance/#Performance-Analysis-Tools","page":"Performance Analysis Tools","title":"Performance Analysis Tools","text":"","category":"section"},{"location":"performance/","page":"Performance Analysis Tools","title":"Performance Analysis Tools","text":"Until commit 7a7e98, ClimaCoupler provided included performance jobs. You can find them by following the link above.","category":"page"},{"location":"performance/","page":"Performance Analysis Tools","title":"Performance Analysis Tools","text":"Below is a short description.","category":"page"},{"location":"performance/","page":"Performance Analysis Tools","title":"Performance Analysis Tools","text":"ClimaCoupler.jl provides basic tools for analyzing performance:","category":"page"},{"location":"performance/","page":"Performance Analysis Tools","title":"Performance Analysis Tools","text":"Flame graphs: the perf/flame.jl script is run by Buildkite to produce flame graphs using ProfileCanvas.jl in the perf/output/ directory.\nJob walltime and allocation history: use Buildkite to trigger the build_history script to output an interactive plot with the history of memory usage and time elapsed for each tracked job (default: current build and past builds of the staging branch over the past year). Use key to select which jobs to track. More documentation can be found in the SLURM-Buildkite Wiki.","category":"page"},{"location":"performance/#Flame-Graph-Interpretation","page":"Performance Analysis Tools","title":"Flame Graph Interpretation","text":"","category":"section"},{"location":"performance/","page":"Performance Analysis Tools","title":"Performance Analysis Tools","text":"use for single-process (un)threaded performance CPU profiling of individual stack traces. It provides a tree representation of a set of backtraces, showing the dependence and CPU cost of each function.\nhere is an example of a flame graph of ClimaCoupler's AMIP run, produced by Buildkite running the perf/flame.jl script:","category":"page"},{"location":"performance/","page":"Performance Analysis Tools","title":"Performance Analysis Tools","text":"(Image: canvas)","category":"page"},{"location":"performance/","page":"Performance Analysis Tools","title":"Performance Analysis Tools","text":"each row along the y-axis represents a level of backtraces. In this case the lowermost level is at the top, and the top level represents what is directly being run on the CPU. The stacks in each level are sorted alphabetically (not chronologically, like flame charts). The column width is proportional to the presence in samples (related to allocations). The colors are grouped into runtime-dispatch, gc, compilation and default. The intensity is random.\nwe also have a local beta version of flame graphs (in perf/ProfileCanvasDiff.jl and perf/ProfileViewerDiff.js), triggered by the perf/flame_diff.jl script, which plots the same flame graphs as above but with the color corresponding to whether the stack allocation has been reduced (blue) or increased (red) compared to the last staged runs. The color intensity is proportional to the fractional change, and black signifies untracked traces. The default is to show the cumulative allocation (current function + all its children functions). By setting self_count to true, we can also count only the allocations of the current function itself, allowing us to isolate allocation changes within our software from changes in the upstream packages.","category":"page"},{"location":"performance/#References","page":"Performance Analysis Tools","title":"References","text":"","category":"section"},{"location":"performance/","page":"Performance Analysis Tools","title":"Performance Analysis Tools","text":"Description of flame graphs and their interpretation\nClimaCore tips for writing performant code\nGeneral Julia-specific performance tips\nLogging performance history using Buildkite and SLURM\nNSight Systems for MPI profiling using Buildkite and SLURM","category":"page"},{"location":"diagnostics/#Diagnostics","page":"Diagnostics","title":"Diagnostics","text":"","category":"section"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"ClimaCoupler.jl utilizes other packages in the CliMA ecosystem to generate and visualize diagnostics, namely ClimaDiagnostics.jl and ClimaAnalysis.jl.","category":"page"},{"location":"diagnostics/#Default-AMIP-diagnostics","page":"Diagnostics","title":"Default AMIP diagnostics","text":"","category":"section"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"We output a set of default diagnostics for all AMIP runs. These currently include the following fields:","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"Atmospheric quantiies:","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"air temperature at the bottom of the atmosphere (3D)\neastward near-surface wind (3D)\nspecific humidity (3D)\nmass fraction of cloud liquid water (3D)\nnet top-of-atmosphere fluxes (3D)\nprecipitation (2D)\nsurface temperature (2D)","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"Coupler quantities","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"turbulent energy fluxes (2D)","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"These diagnostics are all averaged over a period of time that depends on the length of the overall simulation according to the following rule:","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"simulation length >= 90 days: 30-day mean\nsimulation length >= 30 days and < 90 days: 10-day mean\nsimulation length >= 1 day and < 30 days: 1-day mean\nsimulation length < 1 day: 1-hour mean","category":"page"},{"location":"diagnostics/#How-to-add-a-new-diagnostic-variable","page":"Diagnostics","title":"How to add a new diagnostic variable","text":"","category":"section"},{"location":"diagnostics/#Adding-a-diagnostic-for-a-ClimaCoupler-quantity","page":"Diagnostics","title":"Adding a diagnostic for a ClimaCoupler quantity","text":"","category":"section"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"For diagnostics that come from coupler fields or that are computed using input from multiple component models, we set up the diagnostics by directly creating ClimaDiagnostics.jl objects.","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"Specifically, we first create a DiagnosticVariable object containing the variable's name, units, any comments, and the function to compute it. This is then used to create a ScheduledDiagnostic variable, which includes saving and output time information. Once we have created a ScheduledDiagnostic for each variable we're interested in, we collect them in a vector and pass this to our DiagnosticsHandler object.","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"An example of this process for the variable F_turb_energy can be found in experiments/ClimaEarth/user_io/amip_diagnostics.jl.","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"For more information about this process, please see the ClimaDiagnostics.jl documentation.","category":"page"},{"location":"diagnostics/#Adding-a-diagnostic-for-a-CliMA-component-model-quantity","page":"Diagnostics","title":"Adding a diagnostic for a CliMA component model quantity","text":"","category":"section"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"Many of our current diagnostics are values that we access directly from a component model. To add a new diagnostic of this kind, you can add a new method add_diagnostic_variable! extending this function from the component model package's Diagnostics module.","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"For more information about this function and the form it takes, please see the ClimaDiagnostics.jl documentation.","category":"page"},{"location":"diagnostics/#ClimaAtmos.jl","page":"Diagnostics","title":"ClimaAtmos.jl","text":"","category":"section"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"To add a new diagnostic for the ClimaAtmos.jl atmosphere model, you can add this new method for ClimaAtmos.Diagnostics.add_diagnostic_variable! in components/atmosphere/climaatmos_extra_diags.jl. The existing diagnostics in that file can be used as templates.","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"For more information about ClimaAtmos diagnostics, and to see the default atmospheric diagnostics, please see that package's documentation.","category":"page"},{"location":"diagnostics/#ClimaLand.jl","page":"Diagnostics","title":"ClimaLand.jl","text":"","category":"section"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"To add a new diagnostic for the ClimaLand.jl bucket model, you can add this new method for ClimaLand.Diagnostics.add_diagnostic_variable! in components/land/climaland_bucket_extra_diags.jl (which doesn't exist at the time of writing).","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"For more information about ClimaLand diagnostics, and to see the default land diagnostics, please see that package's documentation.","category":"page"},{"location":"diagnostics/#Visualizing-diagnostics","page":"Diagnostics","title":"Visualizing diagnostics","text":"","category":"section"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"ClimaCoupler.jl uses ClimaAnalysis.jl to parse and visualize the outputs saved using ClimaDiagnostics.jl.","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"For more information about ClimaAnalysis.jl, please see that package's documentation.","category":"page"},{"location":"interfacer/#Interfacer","page":"Interfacer","title":"Interfacer","text":"","category":"section"},{"location":"interfacer/","page":"Interfacer","title":"Interfacer","text":"This module contains functions that define the interface for coupling component models, as well as stub objects that contain prescribed fields. Here we explain each type of component model, and the functions that must be implemented to use a component model with ClimaCoupler.jl","category":"page"},{"location":"interfacer/#Coupled-simulation","page":"Interfacer","title":"Coupled simulation","text":"","category":"section"},{"location":"interfacer/","page":"Interfacer","title":"Interfacer","text":"A CoupledSimulation stores info for ESM run and contains each of the component model simulations. We currently require that each CoupledSimulation contains four components: atmos_sim, land_sim, ocean_sim and ice_sim. If a simulation surface type is not needed for a given run, it should be initialized with SurfaceStub with a zero area_fracion. The atmos_sim should always be specified.","category":"page"},{"location":"interfacer/#Component-simulations","page":"Interfacer","title":"Component simulations","text":"","category":"section"},{"location":"interfacer/","page":"Interfacer","title":"Interfacer","text":"Individual component model simulations fall under ComponentModelSimulation, which together combine to make the CoupledSimulation. We have two types of ComponentModelSimulations: AtmosModelSimulation and SurfaceModelSimulation. The two have different requirements, which are detailed below. SurfaceModelSimulation is further divided into SeaIceModelSimulation, LandModelSimulation, and OceanModelSimulation, representing the 3 currently-supported options for surface models.","category":"page"},{"location":"interfacer/#ComponentModelSimulation-required-functions","page":"Interfacer","title":"ComponentModelSimulation - required functions","text":"","category":"section"},{"location":"interfacer/","page":"Interfacer","title":"Interfacer","text":"A component model simulation should be implemented as a struct that is a concrete subtype of a ComponentModelSimulation. This struct should contain all of the information needed to run that simulation.","category":"page"},{"location":"interfacer/","page":"Interfacer","title":"Interfacer","text":"Each ComponentModelSimulation must extend the following functions to be able to use our coupler. For some existing models, these are defined within ClimaCoupler.jl in that model‚Äôs file in experiments/ClimaEarth/components/, but it is preferable for these to be defined in a model‚Äôs own repository. Note that the dispatch ::ComponentModelSimulation in the function definitions given below should be replaced with the particular component model extending these functions.","category":"page"},{"location":"interfacer/","page":"Interfacer","title":"Interfacer","text":"init: construct and return an instance of the ComponentModelSimulation,","category":"page"},{"location":"interfacer/","page":"Interfacer","title":"Interfacer","text":"and perform all initialization. This function should return a simulation that is ready to be stepped in the coupled simulation. The interface for this function varies across component models.","category":"page"},{"location":"interfacer/","page":"Interfacer","title":"Interfacer","text":"name(::ComponentModelSimulation): return a string containing the name of","category":"page"},{"location":"interfacer/","page":"Interfacer","title":"Interfacer","text":"this ComponentModelSimulation, which is used for printing information about component models and writing to checkpoint files.","category":"page"},{"location":"interfacer/","page":"Interfacer","title":"Interfacer","text":"step!(::ComponentModelSimulation, t): A function to update the","category":"page"},{"location":"interfacer/","page":"Interfacer","title":"Interfacer","text":"simulation in-place with values calculate for time t. For the models we currently have implemented, this is a simple wrapper around the step! function implemented in SciMLBase.jl.","category":"page"},{"location":"interfacer/","page":"Interfacer","title":"Interfacer","text":"reinit!(::ComponentModelSimulation): A function to restart a simulation","category":"page"},{"location":"interfacer/","page":"Interfacer","title":"Interfacer","text":"after solving of the simulation has been paused or interrupted. Like step!, this is currently a simple wrapper around the reinit! function of SciMLBase.jl.","category":"page"},{"location":"interfacer/","page":"Interfacer","title":"Interfacer","text":"get_model_prog_state(::ComponentModelSimulation): A function that","category":"page"},{"location":"interfacer/","page":"Interfacer","title":"Interfacer","text":"returns the state vector of the simulation at its current state. This is used for checkpointing the simulation.","category":"page"},{"location":"interfacer/#ComponentModelSimulation-optional-functions","page":"Interfacer","title":"ComponentModelSimulation - optional functions","text":"","category":"section"},{"location":"interfacer/","page":"Interfacer","title":"Interfacer","text":"update_sim!(::ComponentModelSimulation, csf, turbulent_fluxes): A","category":"page"},{"location":"interfacer/","page":"Interfacer","title":"Interfacer","text":"function to update each of the fields of the component model simulation that are updated by the coupler. ClimaCoupler.jl provides defaults of this function for both AtmosModelSimulation and SurfaceModelSimulation that update each of the fields expected by the coupler. This function can optionally be extended to include additional field updates as desired.","category":"page"},{"location":"interfacer/#AtmosModelSimulation-required-functions","page":"Interfacer","title":"AtmosModelSimulation - required functions","text":"","category":"section"},{"location":"interfacer/","page":"Interfacer","title":"Interfacer","text":"In addition to the functions required for a general ComponentModelSimulation, an AtmosModelSimulation requires the following functions to retrieve and update its fields.","category":"page"},{"location":"interfacer/","page":"Interfacer","title":"Interfacer","text":"get_field(::AtmosModelSimulation. ::Val{property}): This getter","category":"page"},{"location":"interfacer/","page":"Interfacer","title":"Interfacer","text":"function returns the value of the field property for the simulation in its current state. For an AtmosModelSimulation, it must be extended for the following properties:","category":"page"},{"location":"interfacer/","page":"Interfacer","title":"Interfacer","text":"Coupler name Description Units\nair_density air density of the atmosphere kg m^-3\nair_temperature air temperature at the surface of the atmosphere K\nenergy globally integrated energy J\nheight_int height at the first internal model level m\nheight_sfc height at the surface (only required when using PartitionedStateFluxes) m\nliquid_precipitation liquid precipitation at the surface kg m^-2 s^-1\nradiative_energy_flux_sfc net radiative flux at the surface W m^-2\nradiative_energy_flux_toa net radiative flux at the top of the atmosphere W m^-2\nsnow_precipitation snow precipitation at the surface kg m^-2 s^-1\nturbulent_energy_flux aerodynamic turbulent surface fluxes of energy (sensible and latent heat) W m^-2\nturbulent_moisture_flux aerodynamic turbulent surface fluxes of energy (evaporation) kg m^-2 s^-1\nthermo_state_int thermodynamic state at the first internal model level \nuv_int horizontal wind velocity vector at the first internal model level m s^-1\nwater globally integrated water kg","category":"page"},{"location":"interfacer/","page":"Interfacer","title":"Interfacer","text":"update_field!(::AtmosModelSimulation. ::Val{property}, field):","category":"page"},{"location":"interfacer/","page":"Interfacer","title":"Interfacer","text":"A function to update the value of property in the component model simulation, using the values in field. This update should be done in place. If this function isn't extended for a property, that property will remain constant throughout the simulation and a warning will be raised. This function is expected to be extended for the following properties:","category":"page"},{"location":"interfacer/","page":"Interfacer","title":"Interfacer","text":"Coupler name Description Units\nco2 global mean co2 ppm\nsurface_direct_albedo bulk direct surface albedo over the whole surface space \nsurface_diffuse_albedo bulk diffuse surface albedo over the whole surface space \nsurface_temperature temperature over the combined surface space K\nturbulent_fluxes turbulent fluxes (note: only required when using PartitionedStateFluxes option - see our FluxCalculator module docs for more information) W m^-2","category":"page"},{"location":"interfacer/","page":"Interfacer","title":"Interfacer","text":"calculate_surface_air_density(atmos_sim::Interfacer.AtmosModelSimulation, T_S::ClimaCore.Fields.Field):","category":"page"},{"location":"interfacer/","page":"Interfacer","title":"Interfacer","text":"A function to return the air density of the atmosphere simulation extrapolated to the surface, with units of [kg m^-3].","category":"page"},{"location":"interfacer/#SurfaceModelSimulation-required-functions","page":"Interfacer","title":"SurfaceModelSimulation - required functions","text":"","category":"section"},{"location":"interfacer/","page":"Interfacer","title":"Interfacer","text":"Analogously to the AtmosModelSimulation, a SurfaceModelSimulation requires additional functions to those required for a general ComponentModelSimulation.","category":"page"},{"location":"interfacer/","page":"Interfacer","title":"Interfacer","text":"get_field(::SurfaceModelSimulation. ::Val{property}): This getter","category":"page"},{"location":"interfacer/","page":"Interfacer","title":"Interfacer","text":"function returns the value of the field property for the simulation at the current time. For a SurfaceModelSimulation, it must be extended for the following properties:","category":"page"},{"location":"interfacer/","page":"Interfacer","title":"Interfacer","text":"Coupler name Description Units\nair_density surface air density kg m^-3\narea_fraction fraction of the simulation grid surface area this model covers \nbeta factor that scales evaporation based on its estimated level of saturation \nroughness_buoyancy aerodynamic roughness length for buoyancy m\nroughness_momentum aerodynamic roughness length for momentum m\nsurface_direct albedo bulk direct surface albedo \nsurface_diffuse albedo bulk diffuse surface albedo \nsurface_humidity surface humidity kg kg^-1\nsurface_temperature surface temperature K","category":"page"},{"location":"interfacer/","page":"Interfacer","title":"Interfacer","text":"update_field!(::SurfaceModelSimulation. ::Val{property}, field):","category":"page"},{"location":"interfacer/","page":"Interfacer","title":"Interfacer","text":"A function to update the value of property in the component model simulation, using the values in field passed from the coupler This update should be done in place. If this function isn't extended for a property, that property will remain constant throughout the simulation and a warning will be raised. This function is expected to be extended for the following properties:","category":"page"},{"location":"interfacer/","page":"Interfacer","title":"Interfacer","text":"Coupler name Description Units\nair_density surface air density kg m^-3\narea_fraction fraction of the simulation grid surface area this model covers \nliquid_precipitation liquid precipitation at the surface kg m^-2 s^-1\nradiative_energy_flux_sfc net radiative flux at the surface W m^-2\nsnow_precipitation snow precipitation at the surface kg m^-2 s^-1\nturbulent_energy_flux aerodynamic turbulent surface fluxes of energy (sensible and latent heat) W m^-2\nturbulent_moisture_flux aerodynamic turbulent surface fluxes of energy (evaporation) kg m^-2 s^-1\nsurface_direct_albedo bulk direct surface albedo; needed if calculated externally of the surface model (e.g. ocean albedo from the atmospheric state) \nsurface_diffuse_albedo bulk diffuse surface albedo; needed if calculated externally of the surface model (e.g. ocean albedo from the atmospheric state) ","category":"page"},{"location":"interfacer/#SurfaceModelSimulation-optional-functions","page":"Interfacer","title":"SurfaceModelSimulation - optional functions","text":"","category":"section"},{"location":"interfacer/","page":"Interfacer","title":"Interfacer","text":"update_turbulent_fluxes!(::ComponentModelSimulation, fields::NamedTuple):","category":"page"},{"location":"interfacer/","page":"Interfacer","title":"Interfacer","text":"This function updates the turbulent fluxes of the component model simulation at this point in horizontal space. The values are updated using the energy and moisture turbulent fluxes stored in fields which are calculated by the coupler. Note that this function is only required when using the PartitionedStateFluxes option of ClimaCoupler.jl. See our FluxCalculator module docs for more information.","category":"page"},{"location":"interfacer/#Prescribed-surface-conditions-SurfaceStub","page":"Interfacer","title":"Prescribed surface conditions - SurfaceStub","text":"","category":"section"},{"location":"interfacer/","page":"Interfacer","title":"Interfacer","text":"SurfaceStub is a SurfaceModelSimulation, but it only contains","category":"page"},{"location":"interfacer/","page":"Interfacer","title":"Interfacer","text":"required data in <surface_stub>.cache, e.g., for the calculation of surface fluxes through a prescribed surface state. The above adapter functions are already predefined for AbstractSurfaceStub, which is extended by SurfaceStub in the surface_stub.jl file, with the cache variables specified as:","category":"page"},{"location":"interfacer/","page":"Interfacer","title":"Interfacer","text":"get_field(sim::AbstractSurfaceStub, ::Val{:air_density}) = sim.cache.œÅ_sfc\nget_field(sim::AbstractSurfaceStub, ::Val{:area_fraction}) = sim.cache.area_fraction\nget_field(sim::AbstractSurfaceStub, ::Val{:beta}) = sim.cache.beta\nget_field(sim::AbstractSurfaceStub, ::Val{:energy}) = nothing\nget_field(sim::AbstractSurfaceStub, ::Val{:roughness_buoyancy}) = sim.cache.z0b\nget_field(sim::AbstractSurfaceStub, ::Val{:roughness_momentum}) = sim.cache.z0m\nget_field(sim::AbstractSurfaceStub, ::Union{Val{:surface_direct_albedo}, Val{:surface_diffuse_albedo}}) = sim.cache.Œ±\nget_field(sim::AbstractSurfaceStub, ::Val{:surface_humidity}) = TD.q_vap_saturation_generic.(sim.cache.thermo_params, sim.cache.T_sfc, sim.cache.œÅ_sfc, sim.cache.phase)\nget_field(sim::AbstractSurfaceStub, ::Val{:surface_temperature}) = sim.cache.T_sfc\nget_field(sim::AbstractSurfaceStub, ::Val{:water}) = nothing","category":"page"},{"location":"interfacer/","page":"Interfacer","title":"Interfacer","text":"and with the corresponding update_field! functions","category":"page"},{"location":"interfacer/","page":"Interfacer","title":"Interfacer","text":"function update_field!(sim::AbstractSurfaceStub, ::Val{:air_density}, field)\n    sim.cache.œÅ_sfc .= field\nend\nfunction update_field!(sim::AbstractSurfaceStub, ::Val{:area_fraction}, field::ClimaCore.Fields.Field)\n    sim.cache.area_fraction .= field\nend\nfunction update_field!(sim::AbstractSurfaceStub, ::Val{:surface_temperature}, field::ClimaCore.Fields.Field)\n    sim.cache.T_sfc .= field\nend","category":"page"},{"location":"interfacer/#Interfacer-API","page":"Interfacer","title":"Interfacer API","text":"","category":"section"},{"location":"interfacer/","page":"Interfacer","title":"Interfacer","text":"    ClimaCoupler.Interfacer.CoupledSimulation\n    ClimaCoupler.Interfacer.AtmosModelSimulation\n    ClimaCoupler.Interfacer.SurfaceModelSimulation\n    ClimaCoupler.Interfacer.ComponentModelSimulation\n    ClimaCoupler.Interfacer.AbstractSurfaceStub\n    ClimaCoupler.Interfacer.SurfaceStub\n    ClimaCoupler.Interfacer.float_type\n    ClimaCoupler.Interfacer.name\n    ClimaCoupler.Interfacer.get_field\n    ClimaCoupler.Interfacer.update_field!\n    ClimaCoupler.Interfacer.AbstractSlabplanetSimulationMode\n    ClimaCoupler.Interfacer.AMIPMode\n    ClimaCoupler.Interfacer.SlabplanetMode\n    ClimaCoupler.Interfacer.SlabplanetAquaMode\n    ClimaCoupler.Interfacer.SlabplanetTerraMode\n    ClimaCoupler.Interfacer.SlabplanetEisenmanMode","category":"page"},{"location":"interfacer/#ClimaCoupler.Interfacer.CoupledSimulation","page":"Interfacer","title":"ClimaCoupler.Interfacer.CoupledSimulation","text":"CoupledSimulation\n\nStores information needed to run a simulation with the coupler.\n\n\n\n\n\n","category":"type"},{"location":"interfacer/#ClimaCoupler.Interfacer.AtmosModelSimulation","page":"Interfacer","title":"ClimaCoupler.Interfacer.AtmosModelSimulation","text":"AtmosModelSimulation\n\nAn abstract type for an atmospheric model simulation.\n\n\n\n\n\n","category":"type"},{"location":"interfacer/#ClimaCoupler.Interfacer.SurfaceModelSimulation","page":"Interfacer","title":"ClimaCoupler.Interfacer.SurfaceModelSimulation","text":"SurfaceModelSimulation\n\nAn abstract type for surface model simulations.\n\n\n\n\n\n","category":"type"},{"location":"interfacer/#ClimaCoupler.Interfacer.ComponentModelSimulation","page":"Interfacer","title":"ClimaCoupler.Interfacer.ComponentModelSimulation","text":"ComponentModelSimulation\n\nAn abstract type encompassing all component model (and model stub) simulations.\n\n\n\n\n\n","category":"type"},{"location":"interfacer/#ClimaCoupler.Interfacer.AbstractSurfaceStub","page":"Interfacer","title":"ClimaCoupler.Interfacer.AbstractSurfaceStub","text":"AbstractSurfaceStub\n\nAn abstract type representing a simple stand-in surface model. Any concrete type extending this abstract type should have a cache field that contains the necessary fields for the simulation, at minimum the following:     - T_sfc (surface temperature [K])     - œÅ_sfc (surface air density [kg / m3])     - z0m (roughness length for momentum [m])     - z0b (roughness length for tracers [m])     - beta (evaporation scaling factor)     - Œ±_direct (direct albedo)     - Œ±_diffuse (diffuse albedo)     - area_fraction (fraction of the grid cell covered by the ocean)     - phase (phase of the water used to calculate surface humidity)     - thermo_params (thermodynamic parameters)\n\n\n\n\n\n","category":"type"},{"location":"interfacer/#ClimaCoupler.Interfacer.SurfaceStub","page":"Interfacer","title":"ClimaCoupler.Interfacer.SurfaceStub","text":"SurfaceStub\n\nOn object containing simulation-like info, used as a stub or for prescribed data.\n\n\n\n\n\n","category":"type"},{"location":"interfacer/#ClimaCoupler.Interfacer.float_type","page":"Interfacer","title":"ClimaCoupler.Interfacer.float_type","text":"float_type(::CoupledSimulation)\n\nReturn the floating point type backing T: T can either be an object or a type.\n\n\n\n\n\n","category":"function"},{"location":"interfacer/#ClimaCoupler.Interfacer.name","page":"Interfacer","title":"ClimaCoupler.Interfacer.name","text":"name(::ComponentModelSimulation)\n\nReturns simulation name, if defined, or Unnamed if not.\n\n\n\n\n\nname(::ComponentModelSimulation)\n\nReturns simulation name, if defined, or Unnamed if not.\n\n\n\n\n\n","category":"function"},{"location":"interfacer/#ClimaCoupler.Interfacer.get_field","page":"Interfacer","title":"ClimaCoupler.Interfacer.get_field","text":"get_field(sim::AtmosModelSimulation, val::Val)\n\nA getter function that should not allocate. Here we implement a default that will raise an error if get_field isn't defined for all required fields of an atmosphere component model.\n\n\n\n\n\nget_field(sim::SurfaceModelSimulation, val::Val)\n\nA getter function that should not allocate. Here we implement a default that will raise an error if get_field isn't defined for all required fields of a surface component model.\n\n\n\n\n\nget_field(sim::ComponentModelSimulation, val::Val)\n\nGeneric fallback for get_field that raises an error.\n\n\n\n\n\nget_field(::AbstractSurfaceStub, ::Val)\n\nA getter function, that should not allocate. If undefined, it returns a descriptive error.\n\n\n\n\n\n","category":"function"},{"location":"interfacer/#ClimaCoupler.Interfacer.update_field!","page":"Interfacer","title":"ClimaCoupler.Interfacer.update_field!","text":"update_field!(::AtmosModelSimulation, ::Val, _...)\n\nDefault functions for updating fields at each timestep in an atmosphere component model simulation. This should be extended by component models. If it isn't extended, the field won't be updated and a warning will be raised.\n\n\n\n\n\nupdate_field!(::SurfaceModelSimulation, ::Val, _...)\n\nDefault functions for updating fields at each timestep in an atmosphere component model simulation. This should be extended by component models. If it isn't extended, the field won't be updated and a warning will be raised.\n\n\n\n\n\nupdate_field!(sim::AbstractSurfaceStub, ::Val{:area_fraction}, field::CC.Fields.Field)\n\nUpdates the specified value in the cache of SurfaceStub.\n\n\n\n\n\n","category":"function"},{"location":"interfacer/#ClimaCoupler.Interfacer.AbstractSlabplanetSimulationMode","page":"Interfacer","title":"ClimaCoupler.Interfacer.AbstractSlabplanetSimulationMode","text":"AbstractSlabplanetSimulationMode\n\nAn abstract type representing a simulation mode for slabplanet models. Slabplanet simulations are more idealized than the AMIP configuration, but provide valuable insight about conservation and individual model behavior.\n\n\n\n\n\n","category":"type"},{"location":"interfacer/#ClimaCoupler.Interfacer.AMIPMode","page":"Interfacer","title":"ClimaCoupler.Interfacer.AMIPMode","text":"AMIPMode\n\nAn abstract type representing the AMIP simulation mode. AMIP is currently the most complex configuration of the ClimaEarth model. It runs a ClimaAtmos.jl atmosphere model, ClimaLand.jl bucket land model, a prescribed ocean model, and a simple thermal sea ice model.\n\n\n\n\n\n","category":"type"},{"location":"interfacer/#ClimaCoupler.Interfacer.SlabplanetMode","page":"Interfacer","title":"ClimaCoupler.Interfacer.SlabplanetMode","text":"SlabplanetMode\n\nAn abstract type represeting the slabplanet simulation mode with a ClimaAtmos.jl atmosphere model, a ClimaLand.jl bucket land model, a thermal slab ocean model, and no sea ice model. Instead of using a sea ice model, the ocean is evaluated in areas that would be covered in ice.\n\n\n\n\n\n","category":"type"},{"location":"interfacer/#ClimaCoupler.Interfacer.SlabplanetAquaMode","page":"Interfacer","title":"ClimaCoupler.Interfacer.SlabplanetAquaMode","text":"SlabplanetAquaMode\n\nAn abstract type representing the slabplanet simulation mode with a ClimaAtmos.jl atmosphere model, and only once surface model, a thermal slab ocean model, which is evaluated over the entire surface. There are no land or sea ice models.\n\n\n\n\n\n","category":"type"},{"location":"interfacer/#ClimaCoupler.Interfacer.SlabplanetTerraMode","page":"Interfacer","title":"ClimaCoupler.Interfacer.SlabplanetTerraMode","text":"SlabplanetTerraMode\n\nAn abstract type representing the slabplanet simulation mode with a ClimaAtmos.jl atmosphere model, and only once surface model, a ClimaLand.jl bucket land model, which is evaluated over the entire surface. There are no ocean or sea ice models.\n\n\n\n\n\n","category":"type"},{"location":"interfacer/#ClimaCoupler.Interfacer.SlabplanetEisenmanMode","page":"Interfacer","title":"ClimaCoupler.Interfacer.SlabplanetEisenmanMode","text":"SlabplanetEisenmanMode\n\nAn abstract type representing the slabplanet simulation mode with a ClimaAtmos.jl atmosphere model, a ClimaLand.jl bucket land model, and Eisenman sea ice model. The ocean model is included in the Eisenman sea ice model.\n\n\n\n\n\n","category":"type"},{"location":"interfacer/#Interfacer-Internal-Functions-and-Types","page":"Interfacer","title":"Interfacer Internal Functions and Types","text":"","category":"section"},{"location":"interfacer/","page":"Interfacer","title":"Interfacer","text":"    ClimaCoupler.Interfacer.AbstractSimulation\n    ClimaCoupler.Interfacer.AbstractSimulationMode","category":"page"},{"location":"interfacer/#ClimaCoupler.Interfacer.AbstractSimulation","page":"Interfacer","title":"ClimaCoupler.Interfacer.AbstractSimulation","text":"AbstractSimulation\n\nAn abstract super-type representing a simulation.\n\n\n\n\n\n","category":"type"},{"location":"interfacer/#ClimaCoupler.Interfacer.AbstractSimulationMode","page":"Interfacer","title":"ClimaCoupler.Interfacer.AbstractSimulationMode","text":"AbstractSimulationMode\n\nAn abstract type representing a simulation mode.\n\n\n\n\n\n","category":"type"},{"location":"generated/sea_breeze/run/#Coupled-Sea-Breeze","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"","category":"section"},{"location":"generated/sea_breeze/run/#Overview","page":"Coupled Sea Breeze","title":"Overview","text":"","category":"section"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"This sea breeze simulation consists of an atmosphere above ocean and land thermal slabs. The difference in heating between the land and ocean components drives circulation: cool ocean air flows towards the land at the surface while warm air over land rises and flows over the ocean.","category":"page"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"In this tutorial we demonstrate the coupling of three component models (atmosphere, ocean, and land) to drive the sea breeze. The primary parts of the ClimaCoupler interface are used and discussed.","category":"page"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"Load utilities for running coupled simulation","category":"page"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"include(\"../CoupledSims/coupled_sim.jl\")\n\n\n\n\n","category":"page"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"Set random seed for reproducibility, rand is called in initseabreeze2d in atmosrhs","category":"page"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"Random.seed!(1234)","category":"page"},{"location":"generated/sea_breeze/run/#Model-Initialization","page":"Coupled Sea Breeze","title":"Model Initialization","text":"","category":"section"},{"location":"generated/sea_breeze/run/#Component-Models","page":"Coupled Sea Breeze","title":"Component Models","text":"","category":"section"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"Component models are the building blocks of coupled models. They are often developed independently from one another and can be executed by themselves as \"standalone\" simulations. The coupler is used to combine these components into coupled simulations. Importantly, coupled simulations can re-use tendency methods developed for standalone simulations, maximizing code reuse and minimizing the necessary code that must be specialized for a coupled run‚Äìonly special boundary conditions must be written. This is achieved by multiple dispatch, where methods that deal with boundaries dispatch off of a coupled boundary type. Here, the atmosphere has special boundary conditions for coupling while the ocean and land tendencies are unaltered. See the atmospheric model page for more details.","category":"page"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"In a more mature CliMA ecosystem, the following include statements would be replaced by using statements for the relevant component packages.","category":"page"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"include(\"atmos_rhs.jl\")\ninclude(\"ocean_rhs.jl\")\ninclude(\"land_rhs.jl\")\n\n# model parameters\nconst atm_T_ini = FT(270.0)\nconst MSLP = FT(1e5)\nconst grav = FT(9.8)\nconst R_d = FT(287.058)\nconst Œ≥ = FT(1.4)\nconst C_p = FT(R_d * Œ≥ / (Œ≥ - 1))\nconst C_v = FT(R_d / (Œ≥ - 1))\nconst R_m = R_d\ncpl_parameters = (\n    # atmos parameters\n    atm_Œº = FT(0.0001), # diffusion coefficient\n    atm_T_top = FT(280.0), # fixed temperature at the top of the domain_atm\n    atm_T_ini = atm_T_ini, # initial condition of at temperature (isothermal) [K]\n    MSLP = MSLP, # mean sea level pressure\n    grav = grav, # gravitational constant\n    R_d = R_d, # R dry (gas constant / mol mass dry air)\n    Œ≥ = Œ≥, # heat capacity ratio\n    C_p = C_p, # heat capacity at constant pressure\n    C_v = C_v, # heat capacity at constant volume\n    R_m = R_m, # moist R, assumed to be dry\n    # land slab parameters\n    lnd_h = FT(0.5), # depth of slab layer [m]\n    lnd_œÅ = FT(1500), # density [kg m^-3]\n    lnd_c = FT(800), # specific heat [J K^-1 kg^-1]\n    lnd_T_ini = FT(260.0), # initial condition of at temperature (isothermal) [K]\n    # ocean slab parameters\n    ocn_h = FT(0.5), # depth of slab layer [m]\n    ocn_œÅ = FT(1025), # density [kg m^-3]\n    ocn_c = FT(3850), # specific heat [J K^-1 kg^-1]\n    ocn_T_ini = FT(260.0), # initial condition of at temperature (isothermal) [K]\n    # coupling parameters\n    C_H = FT(0.0015),\n)\n\n# DSS callback\nfunction make_dss_func()\n    function _dss!(x::CC.Fields.Field)\n        CC.Spaces.weighted_dss!(x)\n    end\n    function _dss!(::Any)\n        nothing\n    end\n    dss_func(Y, t, integrator) = foreach(_dss!, CC.Fields._values(Y))\n    return dss_func\nend\ndss_func = make_dss_func()\ndss_callback = DiffEqCallbacks.FunctionCallingCallback(dss_func, func_start = true)","category":"page"},{"location":"generated/sea_breeze/run/#Initialization","page":"Coupled Sea Breeze","title":"Initialization","text":"","category":"section"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"The coupled simulation synchronizes the component models at a coupling time step, Œît_cpl. Within that step, components may substep - each component specifies a number of substeps to take within Œît_cpl: atm_nsteps, ocn_nsteps, lnd_nsteps.","category":"page"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"Component model states are initialized via the initialization methods each component would use in standalone mode. These states will be modified to reflect the full coupled system before executing the simulation.","category":"page"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"@info \"Init Models and Maps\"\n\nt_start, t_end = (0.0, 1e4)\nŒît_coupled = 0.1\nsaveat = 10.0\natm_nsteps, ocn_nsteps, lnd_nsteps = (5, 1, 1)\n\n# Initialize Models\natm_Y_default, atm_bc, atm_domain = atm_init(\n    xmin = -500,\n    xmax = 500,\n    zmin = 0,\n    zmax = 1000,\n    npoly = 4,\n    helem = 20,\n    velem = 20,\n    bc = (œÅŒ∏ = (bottom = CoupledFlux(), top = ZeroFlux()),),\n)\n\nocn_Y_default, ocn_domain = ocn_init(xmin = -500, xmax = 0, helem = 10, npoly = 0)\n\nlnd_Y_default, lnd_domain = lnd_init(xmin = 0, xmax = 500, helem = 10, npoly = 0)","category":"page"},{"location":"generated/sea_breeze/run/#Remapping","page":"Coupled Sea Breeze","title":"Remapping","text":"","category":"section"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"Because models may live on different grids, remapping is necessary at the boundaries. Maps between coupled components must be constructed for each interacting pair. Remapping utilities are imported from ClimaCore.Operators.","category":"page"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"atm_boundary = CC.Spaces.level(atm_domain.hv_face_space, CC.Utilities.PlusHalf(0))\n\nmaps = (\n    atmos_to_ocean = CC.Operators.LinearRemap(ocn_domain, atm_boundary),\n    atmos_to_land = CC.Operators.LinearRemap(lnd_domain, atm_boundary),\n    ocean_to_atmos = CC.Operators.LinearRemap(atm_boundary, ocn_domain),\n    land_to_atmos = CC.Operators.LinearRemap(atm_boundary, lnd_domain),\n)\n\n# initialize coupling fields\natm_T_sfc =\n    CC.Operators.remap(maps.ocean_to_atmos, ocn_Y_default.T_sfc) .+\n    CC.Operators.remap(maps.land_to_atmos, lnd_Y_default.T_sfc) # masked arrays; regrid to atm grid\natm_F_sfc = CC.Fields.zeros(atm_boundary)\nocn_F_sfc = CC.Fields.zeros(ocn_domain)\nlnd_F_sfc = CC.Fields.zeros(lnd_domain)","category":"page"},{"location":"generated/sea_breeze/run/#Simulations","page":"Coupled Sea Breeze","title":"Simulations","text":"","category":"section"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"Each component is wrapped as a Sim, which contains both the model (tendency) and the time-stepping information (solver, step size, etc). Sims are the standard structures that the coupler works with, enabling dispatch of coupler methods. Here, we create three simulations: AtmosSim, OceanSim, and LandSim.","category":"page"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"atm_Y = CC.Fields.FieldVector(Yc = atm_Y_default.Yc, œÅw = atm_Y_default.œÅw, F_sfc = atm_F_sfc)\natm_p = (cpl_p = cpl_parameters, T_sfc = atm_T_sfc, bc = atm_bc)\natmos = AtmosSim(atm_Y, t_start, Œît_coupled / atm_nsteps, t_end, CTS.RK4(), atm_p, saveat, dss_callback)\n\nocn_Y = CC.Fields.FieldVector(T_sfc = ocn_Y_default.T_sfc)\nocn_p = (cpl_parameters, F_sfc = ocn_F_sfc)\nocean = OceanSim(ocn_Y, t_start, Œît_coupled / ocn_nsteps, t_end, CTS.RK4(), ocn_p, saveat)\n\nlnd_Y = CC.Fields.FieldVector(T_sfc = lnd_Y_default.T_sfc)\nlnd_p = (cpl_parameters, F_sfc = lnd_F_sfc)\nland = LandSim(lnd_Y, t_start, Œît_coupled / lnd_nsteps, t_end, CTS.RK4(), lnd_p, saveat)","category":"page"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"Additionally, we create a coupled simulation that contains the component simulations and the coupled time-stepping information.","category":"page"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"struct AOLCoupledSim{A <: AtmosSim, O <: OceanSim, L <: LandSim, C <: CouplerState} <: AbstractCoupledSim\n    # Atmosphere Simulation\n    atmos::A\n    # Ocean Simulation\n    ocean::O\n    # Land Simulation\n    land::L\n    # Coupler storage\n    coupler::C\nend","category":"page"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"step! is a key method within the Sims interface. It advances a simulation to the specified t_stop, with that simulation advancing by its own internal step size to reach the specified time. Each simulation type should specify its own step method, allowing components to have different time integration backends. Here, all components are using SciMLBase integrators and can share the same step! method.","category":"page"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"function step!(sim::AbstractSim, t_stop)\n    Œît = t_stop - sim.integrator.t\n    SciMLBase.step!(sim.integrator)\nend","category":"page"},{"location":"generated/sea_breeze/run/#The-Coupler","page":"Coupled Sea Breeze","title":"The Coupler","text":"","category":"section"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"The CouplerState is a coupling struct used to store pointers or copies of the shared boundary information. All components are coupled by updating or accessing data in this CouplerState; component models do not directly interface with one another, only through the coupler.","category":"page"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"After creating the CouplerState object, coupled fields can be registered index the coupler via the coupler_add_field! method. This field is then accessible by coupler_get methods and can be updated via the coupler_put! methods.","category":"page"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"Similarly, the coupler_add_map! method registers remapping operators in the coupler. To provide automatic remapping, there is a strict name convention for remap operators: a map from SimA to SimB (where ClimaCoupler.name returns :simA and :simB, respectively) must be named simA_to_simB so that the correct operator can be used.","category":"page"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"Here, the models are coupled through heat transfer at the surface. This heat flux is computed by a bulk formula:","category":"page"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"F_sfc = c_p rho_1 C_H u_1 (theta_sfc - theta_atm1)","category":"page"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"where theta_sfc is the potential temperature at the land or ocean surface, theta_atm1 is the potential temperature at the lowest atmospheric level, c_p is the specific heat, C_H = 00015 is the bulk transfer coefficient for sensible heat, and u_1 is the near-surface atmospheric wind speed. We assume that the potential temperature is defined with respect to the surface pressure, so that theta_sfc = T_sfc.","category":"page"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"coupler = CouplerState(Œît_coupled)\ncoupler_add_field!(coupler, :T_sfc_ocean, ocean.integrator.u.T_sfc; write_sim = ocean)\ncoupler_add_field!(coupler, :T_sfc_land, land.integrator.u.T_sfc; write_sim = land)\ncoupler_add_field!(coupler, :F_sfc, atmos.integrator.u.F_sfc; write_sim = atmos)\nfor (name, map) in pairs(maps)\n    coupler_add_map!(coupler, name, map)\nend\n\nsim = AOLCoupledSim(atmos, ocean, land, coupler)","category":"page"},{"location":"generated/sea_breeze/run/#Coupled-Time-Integration","page":"Coupled Sea Breeze","title":"Coupled Time Integration","text":"","category":"section"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"Finally, the execution sequence of the component models must be specified. This is currently done explicitly with a combination of step!, coupler_pull!, and coupler_push! methods. The coupler_pull! and coupler_push! methods receive and send coupled field info from the coupler, respectively. They must be written for each component simulation, and are simply collections of coupler_get and coupler_put! methods for each component.","category":"page"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"Here, the atmosphere steps forward first and then sends updated fields to the coupler. The ocean and land (which are not coupled to each other) then retreive the updated coupled information, advance and send their own updates to the coupler.","category":"page"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"Because the models exchange fluxes only at the coupled timestep, the surface flux is accumulated over the coupled time-step coupling time step, Œît_cpl","category":"page"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"F_integ = int_Delta t_coupler F_sfc  dt","category":"page"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"where  F_integ has units of J m^-2.","category":"page"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"function cpl_run(simulation::AOLCoupledSim)\n    @info \"Run model\"\n    (; atmos, ocean, land, coupler) = simulation\n    Œît_coupled = coupler.Œît_coupled\n    # coupler stepping\n    for t in ((t_start + Œît_coupled):Œît_coupled:t_end)\n        # Atmos\n        coupler_pull!(atmos, coupler)\n        step!(atmos, t)\n        coupler_push!(coupler, atmos)\n\n        # Ocean\n        coupler_pull!(ocean, coupler)\n        step!(ocean, t)\n        coupler_push!(coupler, ocean)\n\n        # Land\n        coupler_pull!(land, coupler)\n        step!(land, t)\n        coupler_push!(coupler, land)\n    end\n    @info \"Simulation Complete\"\nend\n\n# Run simulation\ncpl_run(sim)","category":"page"},{"location":"generated/sea_breeze/run/#References","page":"Coupled Sea Breeze","title":"References","text":"","category":"section"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"Antonelli & Rotunno 2007","category":"page"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"# Post-processing\n","category":"page"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"JLD2.save(joinpath(path, \"lastsim.jld2\"), \"coupledsim\", sim) #hide","category":"page"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"Plot atmospheric potential temperature [K] throughout the simulation","category":"page"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"theta_fig = Makie.Figure();\ntheta_ax = Makie.Axis(theta_fig[1, 1])","category":"page"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"initial plot to setup axis and make consistent levels","category":"page"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"theta_plot = ClimaCoreMakie.fieldcontourf!(theta_ax, sol.u[end].Yc.œÅŒ∏ ./ sol.u[end].Yc.œÅ)\ntheta_cb = Makie.Colorbar(theta_fig[1, 2], theta_plot)\ntheta_levels = [k for k in range(theta_cb.limits[][1], theta_cb.limits[][2], theta_plot.levels[])]\nMakie.record(theta_fig, joinpath(path, \"theta.mp4\"), 1:length(sol.u); framerate = 20) do i\n    ClimaCoreMakie.fieldcontourf!(theta_ax, sol.u[i].Yc.œÅŒ∏ ./ sol.u[i].Yc.œÅ, levels = theta_levels)\nend\n","category":"page"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"Plot atmospheric vertical velocity [m/s] throughout the simulation","category":"page"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"vel_w_fig = Makie.Figure();\nvel_w_ax = Makie.Axis(vel_w_fig[1, 1])","category":"page"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"initial plot to setup axis and make consistent levels","category":"page"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"vel_w_plot = ClimaCoreMakie.fieldcontourf!(vel_w_ax, If2c.(sol.u[end].œÅw) ./ sol.u[end].Yc.œÅ)\nvel_w_cb = Makie.Colorbar(vel_w_fig[1, 2], vel_w_plot)\nvel_w_levels = [k for k in range(vel_w_cb.limits[][1], vel_w_cb.limits[][2], vel_w_plot.levels[])]\nMakie.record(vel_w_fig, joinpath(path, \"vel_w.mp4\"), 1:length(sol.u); framerate = 20) do i\n    ClimaCoreMakie.fieldcontourf!(vel_w_ax, If2c.(sol.u[i].œÅw) ./ sol.u[i].Yc.œÅ, levels = vel_w_levels)\nend","category":"page"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"Plot atmospheric longitudinal velocity [m/s] throughout the simulation","category":"page"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"vel_u_fig = Makie.Figure();\nvel_u_ax = Makie.Axis(vel_u_fig[1, 1])","category":"page"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"initial plot to setup axis and make consistent levels","category":"page"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"vel_u_plot = ClimaCoreMakie.fieldcontourf!(vel_u_ax, sol.u[end].Yc.œÅu‚Çï ./ sol.u[end].Yc.œÅ)\nvel_u_cb = Makie.Colorbar(vel_u_fig[1, 2], vel_u_plot)\nvel_u_levels = [k for k in range(vel_u_cb.limits[][1], vel_u_cb.limits[][2], vel_u_plot.levels[])]\nMakie.record(vel_u_fig, joinpath(path, \"vel_u.mp4\"), 1:length(sol.u); framerate = 20) do i\n    ClimaCoreMakie.fieldcontourf!(vel_u_ax, sol.u[i].Yc.œÅu‚Çï ./ sol.u[i].Yc.œÅ, levels = vel_u_levels)\nend","category":"page"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"","category":"page"},{"location":"generated/sea_breeze/run/","page":"Coupled Sea Breeze","title":"Coupled Sea Breeze","text":"This page was generated using Literate.jl.","category":"page"},{"location":"leaderboard/#Leaderboard","page":"Leaderboard","title":"Leaderboard","text":"","category":"section"},{"location":"leaderboard/#AMIP-Driver","page":"Leaderboard","title":"AMIP Driver","text":"","category":"section"},{"location":"leaderboard/#Add-a-new-variable-to-compare-against-observations","page":"Leaderboard","title":"Add a new variable to compare against observations","text":"","category":"section"},{"location":"leaderboard/","page":"Leaderboard","title":"Leaderboard","text":"Computing errors against observations are all contained in the leaderboard folder. The files in the leaderboard folder are data_sources.jl and leaderboard.jl. Loading and preprocessing variables of interest are done in data_sources.jl and computing the errors and plotting are done in leaderboard.jl. To add a new variable, you ideally only need to modify data_sources.jl.","category":"page"},{"location":"leaderboard/#Add-a-new-3D-variable-to-the-bias-plots","page":"Leaderboard","title":"Add a new 3D variable to the bias plots","text":"","category":"section"},{"location":"leaderboard/","page":"Leaderboard","title":"Leaderboard","text":"If you want to add a new 3D variable defined over latitude, longitude, and time to the bias plots, you add the variable to sim_var_dict, obs_var_dict, compare_vars_biases_groups, and optionally compare_vars_biases_plot_extrema. The variables sim_var_dict, obs_var_dict, compare_vars_biases_groups, compare_vars_biases_plot_extrema are in the function get_sim_var_dict, get_obs_var_dict, get_compare_vars_biases_groups, and get_compare_vars_biases_plot_extrema respectively.","category":"page"},{"location":"leaderboard/","page":"Leaderboard","title":"Leaderboard","text":"The dictionaries sim_var_dict and obs_var_dict map short names to an anonymous function that returns a OutputVar. Both dictionaries must use the same short names as the keys so that the right simulation and observational data are compared.","category":"page"},{"location":"leaderboard/","page":"Leaderboard","title":"Leaderboard","text":"tip: Preprocessing\nObservational and simulational data should be preprocessed for dates and units. For simulation data, monthly averages correspond to the first day following the month. For instance, the monthly average corresponding to January 2010 is on the date 2/1/2010. Preprocessing is done to shift this date to 1/1/2010. When preprocessing data, we follow the convention that the first day corresponds to the monthly average for that month. For observational data, you should check the convention being followed and preprocess the dates if necessary.For obs_var_dict, the anonymous function must take in a start date. The start date is used in leaderboard.jl to adjust the seconds in the OutputVar to match between start date in the simulation data.Units should be the same between the simulation and observational data.","category":"page"},{"location":"leaderboard/","page":"Leaderboard","title":"Leaderboard","text":"The variable compare_vars_biases_groups is an array of arrays of short names that control which variables are plotted together. You can add the variable to an existing array or make a new array. The dictionary compare_vars_biases_plot_extrema maps short names to tuples. The dictionary sets the lower and upper bounds of the bias plots.","category":"page"},{"location":"leaderboard/#Add-a-new-variable-to-the-leaderboard","page":"Leaderboard","title":"Add a new variable to the leaderboard","text":"","category":"section"},{"location":"leaderboard/","page":"Leaderboard","title":"Leaderboard","text":"If you want to add a new variable to the leaderboard, you add the variable to rmse_var_names and rmse_var_dict. The array rmse_var_names is a list of short names. The dictionary rmse_var_dict maps short name to RMSEVariable. A RMSEVariable must be initialized for each variable of interest. The CliMA model is added with units to the RMSEVariable. It is assumed that the RMSEVariable contains only the columns \"DJF\", \"MAM\", \"JJA\", \"SON\", and \"ANN\" in that order. The file leaderboard.jl will load the appropriate data into the RMSEVariable.","category":"page"},{"location":"leaderboard/#Add-a-new-variable-to-compare-against-observations-in-pressure-coordinates","page":"Leaderboard","title":"Add a new variable to compare against observations in pressure coordinates","text":"","category":"section"},{"location":"leaderboard/","page":"Leaderboard","title":"Leaderboard","text":"To add a new variable, you only need to modify the variable sim_var_pfull_dict in the function get_sim_var_in_pfull_dict, the variable obs_var_dict in the function get_obs_var_in_pfull_dict, and the variable compare_vars_biases_plot_extrema in the function get_compare_vars_biases_plot_extrema_pfull. The variables and functions are defined exactly the same as their analogous versions in the section above.","category":"page"},{"location":"leaderboard/","page":"Leaderboard","title":"Leaderboard","text":"It is expected that the dimensions of the variables are time, latitude, longitude, and pressure in no particular order and the units for the pressure dimension is expected to be hPa.","category":"page"},{"location":"fluxcalculator/#FluxCalculator","page":"FluxCalculator","title":"FluxCalculator","text":"","category":"section"},{"location":"fluxcalculator/","page":"FluxCalculator","title":"FluxCalculator","text":"This modules contains abstract types and functions to calculate surface fluxes in the coupler, or to call flux calculating functions from the component models.","category":"page"},{"location":"fluxcalculator/","page":"FluxCalculator","title":"FluxCalculator","text":"Fluxes over a heterogeneous surface (e.g., from a gridpoint where atmospheric cell is overlying both land and ocean) can be handled in two different ways:","category":"page"},{"location":"fluxcalculator/","page":"FluxCalculator","title":"FluxCalculator","text":"Combined fluxes (called with CombinedStateFluxesMOST())","category":"page"},{"location":"fluxcalculator/","page":"FluxCalculator","title":"FluxCalculator","text":"these are calculated by averaging the surface properties for each gridpoint (e.g., land and ocean temperatures, albedos and roughness lengths are averaged, based on their respective area fractions), so the flux is calculated only once per gridpoint of the grid where we calculate fluxes. This is computationally faster, but it makes the fluxes on surface boundaries more diffuse. Currently, we use this method for calculating radiative fluxes in the atmosphere, and turbulent fluxes in the coupler (on the atmospheric grid). The fluxes are calculated in the atmospheric (host) model's cache, which can be setup to avoid allocating coupler fields.","category":"page"},{"location":"fluxcalculator/","page":"FluxCalculator","title":"FluxCalculator","text":"Partitioned fluxes (called with PartitionedStateFluxes())","category":"page"},{"location":"fluxcalculator/","page":"FluxCalculator","title":"FluxCalculator","text":"these are calculated separately for each surface type. It is then the fluxes (rather than the surface states) that are combined and passed to the atmospheric model as a boundary condition. This method ensures that each surface model receives fluxes that correspond to its state properties, resulting in a more accurate model evolution. However, it is more computationally expensive, and requires more communication between the component models.","category":"page"},{"location":"fluxcalculator/#FluxCalculator-API","page":"FluxCalculator","title":"FluxCalculator API","text":"","category":"section"},{"location":"fluxcalculator/","page":"FluxCalculator","title":"FluxCalculator","text":"    ClimaCoupler.FluxCalculator.TurbulentFluxPartition\n    ClimaCoupler.FluxCalculator.PartitionedStateFluxes\n    ClimaCoupler.FluxCalculator.CombinedStateFluxesMOST\n    ClimaCoupler.FluxCalculator.combined_turbulent_fluxes!\n    ClimaCoupler.FluxCalculator.atmos_turbulent_fluxes_bulk!\n    ClimaCoupler.FluxCalculator.atmos_turbulent_fluxes_most!\n    ClimaCoupler.FluxCalculator.surface_inputs\n    ClimaCoupler.FluxCalculator.calculate_surface_air_density\n    ClimaCoupler.FluxCalculator.get_surface_params\n    ClimaCoupler.FluxCalculator.partitioned_turbulent_fluxes!\n    ClimaCoupler.FluxCalculator.differentiate_turbulent_fluxes!\n    ClimaCoupler.FluxCalculator.get_surface_fluxes!\n    ClimaCoupler.FluxCalculator.update_turbulent_fluxes!\n    ClimaCoupler.FluxCalculator.extrapolate_œÅ_to_sfc\n    ClimaCoupler.FluxCalculator.surface_thermo_state\n    ClimaCoupler.FluxCalculator.water_albedo_from_atmosphere!","category":"page"},{"location":"fluxcalculator/#ClimaCoupler.FluxCalculator.TurbulentFluxPartition","page":"FluxCalculator","title":"ClimaCoupler.FluxCalculator.TurbulentFluxPartition","text":"TurbulentFluxPartition\n\nAbstract type for flags that denote where and how to calculate tubulent fluxes.\n\n\n\n\n\n","category":"type"},{"location":"fluxcalculator/#ClimaCoupler.FluxCalculator.PartitionedStateFluxes","page":"FluxCalculator","title":"ClimaCoupler.FluxCalculator.PartitionedStateFluxes","text":"PartitionedStateFluxes <: TurbulentFluxPartition\n\nA flag indicating that the turbulent fluxes should be partitioned and calculated over each surface model and then combined. This is calculated on the coupler grid.\n\n\n\n\n\n","category":"type"},{"location":"fluxcalculator/#ClimaCoupler.FluxCalculator.CombinedStateFluxesMOST","page":"FluxCalculator","title":"ClimaCoupler.FluxCalculator.CombinedStateFluxesMOST","text":"CombinedStateFluxesMOST <: TurbulentFluxPartition\n\nA flag indicating that the turbulent fluxes (e.g. sensible and latent heat fluxes, drag and moisture fluxes) are to be  calculated on the Atmos grid, and saved in Atmos cache.\n\n\n\n\n\n","category":"type"},{"location":"fluxcalculator/#ClimaCoupler.FluxCalculator.combined_turbulent_fluxes!","page":"FluxCalculator","title":"ClimaCoupler.FluxCalculator.combined_turbulent_fluxes!","text":"combined_turbulent_fluxes!(model_sims, csf, turbulent_fluxes::TurbulentFluxPartition)\n\nCalls the method(s) which calculate turbulent surface fluxes from combined surface states in coupler fields, csf.\n\nArguments\n\nmodel_sims: [NamedTuple] containing ComponentModelSimulations.\ncsf: [NamedTuple] containing coupler fields.\nturbulent_fluxes: [TurbulentFluxPartition] denotes a flag for turbulent flux calculation.\n\n\n\n\n\n","category":"function"},{"location":"fluxcalculator/#ClimaCoupler.FluxCalculator.atmos_turbulent_fluxes_most!","page":"FluxCalculator","title":"ClimaCoupler.FluxCalculator.atmos_turbulent_fluxes_most!","text":"atmos_turbulent_fluxes_most!(sim::Interfacer.ComponentModelSimulation, csf)\n\nA function to calculate turbulent surface fluxes using the combined surface states and the Monin Obukhov Similarity Theory. It is required that a method is defined for the given sim and that the fluxes are saved in that sim's cache. csf refers to the coupler fields.\n\nArguments\n\nsim: [Interfacer.ComponentModelSimulation] object containing the component model simulation.\ncsf: [NamedTuple] containing coupler fields.\n\nExample:\n\nfunction atmos_turbulent_fluxes_most!(atmos_sim::ClimaAtmosSimulation, csf)\n    atmos_sim.cache.flux .= atmos_sim.c .* (csf.T_S .- atmos_sim.temperature)\nend\n\n\n\n\n\n","category":"function"},{"location":"fluxcalculator/#ClimaCoupler.FluxCalculator.surface_inputs","page":"FluxCalculator","title":"ClimaCoupler.FluxCalculator.surface_inputs","text":"surface_inputs(scheme::AbstractSurfaceFluxScheme, thermo_state_sfc, thermo_state_int, u‚Çï_int, z_int, z_sfc, z0b, z0m, Ch, Cd, beta, gustiness)\n\nReturns the inputs for the surface model simulation sim.\n\n\n\n\n\n","category":"function"},{"location":"fluxcalculator/#ClimaCoupler.FluxCalculator.calculate_surface_air_density","page":"FluxCalculator","title":"ClimaCoupler.FluxCalculator.calculate_surface_air_density","text":"calculate_surface_air_density(atmos_sim::ClimaAtmosSimulation, T_S::CC.Fields.Field)\n\nExtension for this  to to calculate surface density.\n\n\n\n\n\n","category":"function"},{"location":"fluxcalculator/#ClimaCoupler.FluxCalculator.get_surface_params","page":"FluxCalculator","title":"ClimaCoupler.FluxCalculator.get_surface_params","text":"get_surface_params(atmos_sim::Interfacer.AtmosModelSimulation)\n\nReturns the surface parameters of type SF.Parameters.SurfaceFluxesParameters.\n\nTODO: in the future this may not need to depend on the atmos sim, but here retaining the dependency until we know how EDMF boundary conditions will be handled (for consistency of parameters).\n\n\n\n\n\n","category":"function"},{"location":"fluxcalculator/#ClimaCoupler.FluxCalculator.partitioned_turbulent_fluxes!","page":"FluxCalculator","title":"ClimaCoupler.FluxCalculator.partitioned_turbulent_fluxes!","text":"partitioned_turbulent_fluxes!(model_sims::NamedTuple, fields::NamedTuple, boundary_space::CC.Spaces.AbstractSpace, surface_scheme, thermo_params::TD.Parameters.ThermodynamicsParameters)\n\nThe current setup calculates the aerodynamic fluxes in the coupler (assuming no regridding is needed) using adapter function get_surface_fluxes!, which calls SurfaceFluxes.jl. The coupler saves the area-weighted sums of the fluxes.\n\nArgs:\n\nmodel_sims: [NamedTuple] containing ComponentModelSimulations.\nfields: [NamedTuple] containing coupler fields.\nboundary_space: [CC.Spaces.AbstractSpace] the space of the coupler surface.\nsurface_scheme: [AbstractSurfaceFluxScheme] the surface flux scheme.\nthermo_params: [TD.Parameters.ThermodynamicsParameters] the thermodynamic parameters.\n\nTODO:\n\ngeneralize interface for regridding and take land state out of atmos's integrator.p\nadd flux accumulation\nadd flux bounds\n\n(NB: Radiation surface fluxes are calculated by the atmosphere.)\n\n\n\n\n\n","category":"function"},{"location":"fluxcalculator/#ClimaCoupler.FluxCalculator.differentiate_turbulent_fluxes!","page":"FluxCalculator","title":"ClimaCoupler.FluxCalculator.differentiate_turbulent_fluxes!","text":"differentiate_turbulent_fluxes!(sim::Interfacer.SurfaceModelSimulation, args)\n\nThis function provides a placeholder for differentiating fluxes with respect to surface temperature in surface energy balance calculations.\n\n\n\n\n\n","category":"function"},{"location":"fluxcalculator/#ClimaCoupler.FluxCalculator.get_surface_fluxes!","page":"FluxCalculator","title":"ClimaCoupler.FluxCalculator.get_surface_fluxes!","text":"get_surface_fluxes!(inputs, surface_params::SF.Parameters.SurfaceFluxesParameters)\n\nUses SurfaceFluxes.jl to calculate turbulent surface fluxes. It should be atmos model agnostic, and columnwise.\n\n\n\n\n\n","category":"function"},{"location":"fluxcalculator/#ClimaCoupler.FluxCalculator.update_turbulent_fluxes!","page":"FluxCalculator","title":"ClimaCoupler.FluxCalculator.update_turbulent_fluxes!","text":"update_turbulent_fluxes!(sim::Interfacer.SurfaceModelSimulation, fields::NamedTuple)\n\nUpdates the fluxes in the surface model simulation sim with the fluxes in fields.\n\n\n\n\n\n","category":"function"},{"location":"fluxcalculator/#ClimaCoupler.FluxCalculator.extrapolate_œÅ_to_sfc","page":"FluxCalculator","title":"ClimaCoupler.FluxCalculator.extrapolate_œÅ_to_sfc","text":"extrapolate_œÅ_to_sfc(thermo_params, ts_int, T_sfc)\n\nUses the ideal gas law and hydrostatic balance to extrapolate for surface density.\n\n\n\n\n\n","category":"function"},{"location":"fluxcalculator/#ClimaCoupler.FluxCalculator.surface_thermo_state","page":"FluxCalculator","title":"ClimaCoupler.FluxCalculator.surface_thermo_state","text":"surface_thermo_state(sim::Interfacer.SurfaceModelSimulation, thermo_params::TD.Parameters.ThermodynamicsParameters, thermo_state_int)\n\nReturns the surface parameters for the surface model simulation sim. The default is assuming saturated surfaces, unless an extension is defined for the given SurfaceModelSimulation.\n\n\n\n\n\n","category":"function"},{"location":"fluxcalculator/#ClimaCoupler.FluxCalculator.water_albedo_from_atmosphere!","page":"FluxCalculator","title":"ClimaCoupler.FluxCalculator.water_albedo_from_atmosphere!","text":"water_albedo_from_atmosphere!(cs::Interfacer.CoupledSimulation)\n\nCallback to calculate the water albedo from atmospheric state. This is a placeholder for the full radiation callback.\n\n\n\n\n\nwater_albedo_from_atmosphere!(atmos_sim::Interfacer.AtmosModelSimulation, ::CC.Fields.Field, ::CC.Fields.Field)\n\nPlaceholder for the water albedo calculation from the atmosphere. It returns an error if not extended.\n\n\n\n\n\n","category":"function"},{"location":"fluxcalculator/#FieldExchanger-Internal-Functions","page":"FluxCalculator","title":"FieldExchanger Internal Functions","text":"","category":"section"},{"location":"fluxcalculator/","page":"FluxCalculator","title":"FluxCalculator","text":"    ClimaCoupler.FluxCalculator.get_scheme_properties","category":"page"},{"location":"fluxcalculator/#ClimaCoupler.FluxCalculator.get_scheme_properties","page":"FluxCalculator","title":"ClimaCoupler.FluxCalculator.get_scheme_properties","text":"get_scheme_properties(scheme::AbstractSurfaceFluxScheme, sim::Interfacer.SurfaceModelSimulation)\n\nReturns the scheme-specific properties for the surface model simulation sim.\n\n\n\n\n\n","category":"function"},{"location":"generated/amip/run_amip/#AMIP-Driver","page":"AMIP Driver","title":"AMIP Driver","text":"","category":"section"},{"location":"generated/amip/run_amip/#Overview","page":"AMIP Driver","title":"Overview","text":"","category":"section"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"AMIP is a standard experimental protocol of the Program for Climate Model Diagnosis & Intercomparison (PCMDI). It is used as a model benchmark for the atmospheric and land model components, while sea-surface temperatures (SST) and sea-ice concentration (SIC) are prescribed using time-interpolations between monthly observed data. We use standard data files with original sources:","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"SST and SIC: https://gdex.ucar.edu/dataset/158_asphilli.html\nland-sea mask: https://www.ncl.ucar.edu/Applications/Data/#cdf","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"For more information, see the PCMDI's specifications for AMIP I and AMIP II.","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"This driver contains two modes. The full AMIP mode and a SlabPlanet (all surfaces are thermal slabs) mode. Since AMIP is not a closed system, the SlabPlanet mode is useful for checking conservation properties of the coupling.","category":"page"},{"location":"generated/amip/run_amip/#Logging","page":"AMIP Driver","title":"Logging","text":"","category":"section"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"When Julia 1.10+ is used interactively, stacktraces contain reduced type information to make them shorter. Given that ClimaCore objects are heavily parametrized, non-abbreviated stacktraces are hard to read, so we force abbreviated stacktraces even in non-interactive runs. (See also Base.type_limited_string_from_context())","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"redirect_stderr(IOContext(stderr, :stacktrace_types_limited => Ref(false)))","category":"page"},{"location":"generated/amip/run_amip/#Configuration-initialization","page":"AMIP Driver","title":"Configuration initialization","text":"","category":"section"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"Here we import standard Julia packages, ClimaESM packages, parse in command-line arguments (if none are specified then the defaults in cli_options.jl apply). We then specify the input data file names. If these are not already downloaded, include artifacts/download_artifacts.jl.","category":"page"},{"location":"generated/amip/run_amip/#Package-Import","page":"AMIP Driver","title":"Package Import","text":"","category":"section"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"# standard packages\nimport Dates\nimport DelimitedFiles","category":"page"},{"location":"generated/amip/run_amip/#ClimaESM-packages","page":"AMIP Driver","title":"ClimaESM packages","text":"","category":"section"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"import ClimaAtmos as CA\nimport ClimaComms\nimport ClimaCore as CC","category":"page"},{"location":"generated/amip/run_amip/#Coupler-specific-imports","page":"AMIP Driver","title":"Coupler specific imports","text":"","category":"section"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"import ClimaCoupler\nimport ClimaCoupler:\n    ConservationChecker, Checkpointer, FieldExchanger, FluxCalculator, Interfacer, TimeManager, Utilities\nimport ClimaCoupler.Interfacer:\n    AbstractSlabplanetSimulationMode,\n    AMIPMode,\n    SlabplanetAquaMode,\n    SlabplanetEisenmanMode,\n    SlabplanetMode,\n    SlabplanetTerraMode\n\nimport ClimaUtilities.SpaceVaryingInputs: SpaceVaryingInput\nimport ClimaUtilities.TimeVaryingInputs: TimeVaryingInput, evaluate!\nimport ClimaUtilities.Utils: period_to_seconds_float\nimport ClimaUtilities.ClimaArtifacts: @clima_artifact\nimport Interpolations # triggers InterpolationsExt in ClimaUtilities","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"Random is used by RRMTGP for some cloud properties","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"import Random","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"TODO: Move to ClimaUtilities once we move the Schedules to ClimaUtilities","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"import ClimaDiagnostics.Schedules: EveryCalendarDtSchedule\n\npkg_dir = pkgdir(ClimaCoupler)","category":"page"},{"location":"generated/amip/run_amip/#Helper-Functions","page":"AMIP Driver","title":"Helper Functions","text":"","category":"section"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"These will be eventually moved to their respective component model and utility packages, and so they should not contain any internals of the ClimaCoupler source code, except extensions to the Interfacer functions.","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"# helpers for component models\ninclude(\"components/atmosphere/climaatmos.jl\")\ninclude(\"components/land/climaland_bucket.jl\")\ninclude(\"components/ocean/slab_ocean.jl\")\ninclude(\"components/ocean/prescr_ocean.jl\")\ninclude(\"components/ocean/prescr_seaice.jl\")\ninclude(\"components/ocean/eisenman_seaice.jl\")","category":"page"},{"location":"generated/amip/run_amip/#Configuration-Dictionaries","page":"AMIP Driver","title":"Configuration Dictionaries","text":"","category":"section"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"Each simulation mode has its own configuration dictionary. The config_dict of each simulation is a merge of the default configuration dictionary and the simulation-specific configuration dictionary, which allows the user to override the default settings.","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"We can additionally pass the configuration dictionary to the component model initializers, which will then override the default settings of the component models.","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"include(\"cli_options.jl\")\ninclude(\"user_io/arg_parsing.jl\")\ninclude(\"user_io/postprocessing.jl\")\nconfig_dict = get_coupler_config()","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"Select the correct timestep for each component model based on which are available","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"parse_component_dts!(config_dict)","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"Add extra diagnostics if specified","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"add_extra_diagnostics!(config_dict)\n\n(;\n    job_id,\n    sim_mode,\n    random_seed,\n    FT,\n    comms_ctx,\n    t_end,\n    t_start,\n    date0,\n    date,\n    Œît_cpl,\n    component_dt_dict,\n    saveat,\n    checkpoint_dt,\n    restart_dir,\n    restart_t,\n    use_coupler_diagnostics,\n    use_land_diagnostics,\n    calendar_dt,\n    evolving_ocean,\n    mono_surface,\n    turb_flux_partition,\n    land_domain_type,\n    land_albedo_type,\n    land_initial_condition,\n    land_temperature_anomaly,\n    energy_check,\n    conservation_softfail,\n    output_dir_root,\n    plot_diagnostics,\n) = get_coupler_args(config_dict)","category":"page"},{"location":"generated/amip/run_amip/#I/O-Directory-Setup-setup_output_dirs-returns-dir_paths.output","page":"AMIP Driver","title":"I/O Directory Setup setup_output_dirs returns `dir_paths.output =","text":"","category":"section"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"COUPLEROUTPUTDIR, which is the directory where the output of the simulation will be saved,dirpaths.artifactsis the directory where the plots (from postprocessing and the conservation checks) of the simulation will be saved, #anddirpaths.checkpoints`, where restart files are saved.","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"COUPLER_OUTPUT_DIR = joinpath(output_dir_root, job_id)\ndir_paths = Utilities.setup_output_dirs(output_dir = COUPLER_OUTPUT_DIR, comms_ctx = comms_ctx)\n@info \"Coupler output directory $(dir_paths.output)\"\n@info \"Coupler artifacts directory $(dir_paths.artifacts)\"\n@info \"Coupler checkpoint directory $(dir_paths.checkpoints)\"\n\natmos_output_dir = joinpath(dir_paths.output, \"clima_atmos\")\nisdir(atmos_output_dir) || mkpath(atmos_output_dir)\nland_output_dir = joinpath(dir_paths.output, \"clima_land\")\nisdir(land_output_dir) || mkpath(land_output_dir)\n\n\n# get component model dictionaries (if applicable)\n# Note this step must come after parsing the coupler config dictionary, since\n#  some parameters are passed from the coupler config to the component model configs\natmos_config_dict = get_atmos_config_dict(config_dict, job_id, atmos_output_dir)\n(; dt_rad, output_default_diagnostics) = get_atmos_args(atmos_config_dict)\n\n# set unique random seed if desired, otherwise use default\nRandom.seed!(random_seed)\n@info \"Random seed set to $(random_seed)\"\n\ntspan = (t_start, t_end)","category":"page"},{"location":"generated/amip/run_amip/#Data-File-Paths","page":"AMIP Driver","title":"Data File Paths","text":"","category":"section"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"co2_data = joinpath(@clima_artifact(\"co2_dataset\", comms_ctx), \"co2_mm_mlo.txt\")\nland_mask_data = joinpath(@clima_artifact(\"landsea_mask_60arcseconds\", comms_ctx), \"landsea_mask.nc\")","category":"page"},{"location":"generated/amip/run_amip/#Component-Model-Initialization","page":"AMIP Driver","title":"Component Model Initialization","text":"","category":"section"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"Here we set initial and boundary conditions for each component model. Each component model is required to have an init function that returns a ComponentModelSimulation object (see Interfacer docs for more details).","category":"page"},{"location":"generated/amip/run_amip/#Atmosphere","page":"AMIP Driver","title":"Atmosphere","text":"","category":"section"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"This uses the ClimaAtmos.jl model, with parameterization options specified in the atmos_config_object dictionary.","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"Utilities.show_memory_usage()\n\n# init atmos model component\natmos_sim = ClimaAtmosSimulation(CA.AtmosConfig(atmos_config_dict));","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"Get surface elevation from atmos coordinate field","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"surface_elevation = CC.Fields.level(CC.Fields.coordinate_field(atmos_sim.integrator.u.f).z, CC.Utilities.half)\nUtilities.show_memory_usage()\n\nthermo_params = get_thermo_params(atmos_sim) # TODO: this should be shared by all models #342","category":"page"},{"location":"generated/amip/run_amip/#Boundary-Space","page":"AMIP Driver","title":"Boundary Space","text":"","category":"section"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"We use a common Space for all global surfaces. This enables the MPI processes to operate on the same columns in both the atmospheric and surface components, so exchanges are parallelized. Note this is only possible when the atmosphere and surface are of the same horizontal resolution.","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"Currently, we use the 2D surface space from the atmosphere model as our shared space, but ultimately we want this to specified within the coupler and passed to all component models. (see issue #665)","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"# init a 2D boundary space at the surface\nboundary_space = CC.Spaces.horizontal_space(atmos_sim.domain.face_space) # TODO: specify this in the coupler and pass it to all component models #665","category":"page"},{"location":"generated/amip/run_amip/#Land-sea-Fraction","page":"AMIP Driver","title":"Land-sea Fraction","text":"","category":"section"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"This is a static field that contains the area fraction of land and sea, ranging from 0 to 1. If applicable, sea ice is included in the sea fraction at this stage. Note that land-sea area fraction is different to the land-sea mask, which is a binary field (masks are used internally by the coupler to indicate passive cells that are not populated by a given component model).","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"Preprocess the file to be 1s and 0s before remapping into onto the grid","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"land_fraction = SpaceVaryingInput(land_mask_data, \"landsea\", boundary_space)\nif !mono_surface\n    land_fraction = Utilities.binary_mask.(land_fraction)\nend\nUtilities.show_memory_usage()","category":"page"},{"location":"generated/amip/run_amip/#Surface-Models:-AMIP-and-SlabPlanet-Modes","page":"AMIP Driver","title":"Surface Models: AMIP and SlabPlanet Modes","text":"","category":"section"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"Both modes evolve ClimaLand.jl's bucket model.","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"In the AMIP mode, all ocean properties are prescribed from a file, while sea-ice temperatures are calculated using observed SIC and assuming a 2m thickness of the ice.","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"In the SlabPlanet mode, all ocean and sea ice are dynamical models, namely thermal slabs, with different parameters. We have several SlabPlanet versions","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"slabplanet = land + slab ocean\nslabplanet_aqua = slab ocean everywhere\nslabplanet_terra = land everywhere\nslabplanet_eisenman = land + slab ocean + slab sea ice with an evolving thickness","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"In this section of the code, we initialize all component models and read in the prescribed data we'll be using. The specific models and data that are set up depend on which mode we're running.","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"@info(sim_mode)\nif sim_mode <: AMIPMode\n    @info(\"AMIP boundary conditions - do not expect energy conservation\")\n\n    # land model\n    land_sim = BucketSimulation(\n        FT,\n        tspan,\n        land_domain_type,\n        land_albedo_type,\n        land_initial_condition,\n        land_temperature_anomaly,\n        land_output_dir;\n        dt = component_dt_dict[\"dt_land\"],\n        space = boundary_space,\n        saveat = saveat,\n        area_fraction = land_fraction,\n        date_ref = date0,\n        t_start = t_start,\n        energy_check = energy_check,\n        surface_elevation,\n        use_land_diagnostics,\n    )\n\n    # sea ice model\n    ice_sim = PrescribedIceSimulation(\n        FT;\n        tspan = tspan,\n        dt = component_dt_dict[\"dt_seaice\"],\n        saveat = saveat,\n        space = boundary_space,\n        thermo_params = thermo_params,\n        comms_ctx,\n        date0,\n        mono_surface,\n        land_fraction,\n    )\n\n    # ocean model using prescribed data\n    ice_fraction = Interfacer.get_field(ice_sim, Val(:area_fraction))\n    ocean_fraction = FT(1) .- ice_fraction .- land_fraction\n    ocean_sim = PrescribedOceanSimulation(FT, boundary_space, date0, t_start, ocean_fraction, thermo_params, comms_ctx)\n\n    # CO2 concentration from temporally varying file\n    CO2_text = DelimitedFiles.readdlm(co2_data, Float64; comments = true)","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"The text file only has month and year, so we set the day to 15th of the month","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"    years = CO2_text[:, 1]\n    months = CO2_text[:, 2]\n    CO2_dates = Dates.DateTime.(years, months) + Dates.Day(14)\n    CO2_times = period_to_seconds_float.(CO2_dates .- date0)","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"convert from ppm to fraction, data is in fourth column of the text file","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"    CO2_vals = CO2_text[:, 4] .* 10^(-6)\n    CO2_timevaryinginput = TimeVaryingInput(CO2_times, CO2_vals;)\n\n    CO2_init = zeros(boundary_space)\n    evaluate!(CO2_init, CO2_timevaryinginput, t_start)\n    CO2_field = Interfacer.update_field!(atmos_sim, Val(:co2), CO2_init)\n\n    mode_specifics = (; type = sim_mode, CO2_timevaryinginput = CO2_timevaryinginput)\n    Utilities.show_memory_usage()\n\nelseif (sim_mode <: AbstractSlabplanetSimulationMode) && !(sim_mode <: SlabplanetEisenmanMode)\n\n\n    land_fraction = sim_mode <: SlabplanetAquaMode ? land_fraction .* 0 : land_fraction\n    land_fraction = sim_mode <: SlabplanetTerraMode ? land_fraction .* 0 .+ 1 : land_fraction\n\n    # land model\n    land_sim = BucketSimulation(\n        FT,\n        tspan,\n        land_domain_type,\n        land_albedo_type,\n        land_initial_condition,\n        land_temperature_anomaly,\n        land_output_dir;\n        dt = component_dt_dict[\"dt_land\"],\n        space = boundary_space,\n        saveat = saveat,\n        area_fraction = land_fraction,\n        date_ref = date0,\n        t_start = t_start,\n        energy_check = energy_check,\n        surface_elevation,\n        use_land_diagnostics,\n    )\n\n    # ocean model\n    ocean_sim = SlabOceanSimulation(\n        FT;\n        tspan = tspan,\n        dt = component_dt_dict[\"dt_ocean\"],\n        space = boundary_space,\n        saveat = saveat,\n        area_fraction = (FT(1) .- land_fraction), ## NB: this ocean fraction includes areas covered by sea ice (unlike the one contained in the cs)\n        thermo_params = thermo_params,\n        evolving = evolving_ocean,\n    )\n\n    # sea ice stub (here set to zero area coverage)\n    ice_sim = Interfacer.SurfaceStub((;\n        T_sfc = ones(boundary_space),\n        œÅ_sfc = zeros(boundary_space),\n        z0m = FT(0),\n        z0b = FT(0),\n        beta = FT(1),\n        Œ±_direct = ones(boundary_space),\n        Œ±_diffuse = ones(boundary_space),\n        area_fraction = zeros(boundary_space),\n        phase = TD.Ice(),\n        thermo_params = thermo_params,\n    ))\n\n    mode_specifics = (; type = sim_mode)\n    Utilities.show_memory_usage()\n\nelseif sim_mode <: SlabplanetEisenmanMode\n\n    # land model\n    land_sim = BucketSimulation(\n        FT,\n        tspan,\n        land_domain_type,\n        land_albedo_type,\n        land_initial_condition,\n        land_temperature_anomaly,\n        land_output_dir;\n        dt = component_dt_dict[\"dt_land\"],\n        space = boundary_space,\n        saveat = saveat,\n        area_fraction = land_fraction,\n        date_ref = date0,\n        t_start = t_start,\n        energy_check = energy_check,\n        surface_elevation,\n        use_land_diagnostics,\n    )\n\n    # ocean stub (here set to zero area coverage)\n    ocean_sim = SlabOceanSimulation(\n        FT;\n        tspan = tspan,\n        dt = component_dt_dict[\"dt_ocean\"],\n        space = boundary_space,\n        saveat = saveat,\n        area_fraction = zeros(boundary_space), # zero, since ML is calculated below\n        thermo_params = thermo_params,\n    )\n\n    # sea ice + ocean model\n    ice_sim = EisenmanIceSimulation(\n        FT,\n        tspan,\n        space = boundary_space,\n        area_fraction = (FT(1) .- land_fraction),\n        dt = component_dt_dict[\"dt_seaice\"],\n        saveat = saveat,\n        thermo_params = thermo_params,\n    )\n\n    mode_specifics = (; type = sim_mode)\n    Utilities.show_memory_usage()\nend","category":"page"},{"location":"generated/amip/run_amip/#Coupler-Initialization","page":"AMIP Driver","title":"Coupler Initialization","text":"","category":"section"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"The coupler needs to contain exchange information, access all component models, and manage the calendar, among other responsibilities. Objects containing information to enable these are initialized here and saved in the global CoupledSimulation struct, cs, below.","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"# coupler exchange fields\ncoupler_field_names = (\n    :T_S,\n    :z0m_S,\n    :z0b_S,\n    :œÅ_sfc,\n    :q_sfc,\n    :surface_direct_albedo,\n    :surface_diffuse_albedo,\n    :beta,\n    :F_turb_energy,\n    :F_turb_moisture,\n    :F_turb_œÅœÑxz,\n    :F_turb_œÅœÑyz,\n    :F_radiative,\n    :P_liq,\n    :P_snow,\n    :radiative_energy_flux_toa,\n    :P_net,\n    :temp1,\n    :temp2,\n)\ncoupler_fields = NamedTuple{coupler_field_names}(ntuple(i -> zeros(boundary_space), length(coupler_field_names)))\nUtilities.show_memory_usage()\n\n# model simulations\nmodel_sims = (atmos_sim = atmos_sim, ice_sim = ice_sim, land_sim = land_sim, ocean_sim = ocean_sim);\n\n# dates\ndates = (; date = [date], date0 = [date0])","category":"page"},{"location":"generated/amip/run_amip/#Initialize-Conservation-Checks","page":"AMIP Driver","title":"Initialize Conservation Checks","text":"","category":"section"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"The conservation checks are used to monitor the global energy and water conservation of the coupled system. The checks are only applicable to the slabplanet mode, as the amip mode is not a closed system. The conservation checks are initialized here and saved in a global ConservationChecks struct, conservation_checks, which is then stored as part of the larger cs struct.","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"# init conservation info collector\nconservation_checks = nothing\nif energy_check\n    @assert(\n        sim_mode <: AbstractSlabplanetSimulationMode && !CA.is_distributed(ClimaComms.context(boundary_space)),\n        \"Only non-distributed slabplanet allowable for energy_check\"\n    )\n    conservation_checks = (;\n        energy = ConservationChecker.EnergyConservationCheck(model_sims),\n        water = ConservationChecker.WaterConservationCheck(model_sims),\n    )\nend","category":"page"},{"location":"generated/amip/run_amip/#Initialize-Callbacks","page":"AMIP Driver","title":"Initialize Callbacks","text":"","category":"section"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"Callbacks are used to update at a specified interval. The callbacks are initialized here and saved in a global Callbacks struct, callbacks. The trigger_callback! function is used to call the callback during the simulation below.","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"The currently implemented callbacks are:","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"checkpoint_cb: generates a checkpoint of all model states at a specified interval. This is mainly used for restarting simulations.\nalbedo_cb: for the amip mode, the water albedo is time varying (since the reflectivity of water depends on insolation and wave characteristics, with the latter being approximated from wind speed). It is updated at the same frequency as the atmospheric radiation. NB: Eventually, we will call all of radiation from the coupler, in addition to the albedo calculation.","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"schedule_checkpoint = EveryCalendarDtSchedule(TimeManager.time_to_period(checkpoint_dt); start_date = date0)\ncheckpoint_cb = TimeManager.TimeManager.Callback(schedule_checkpoint, Checkpointer.checkpoint_sims)\n\nif sim_mode <: AMIPMode\n    schedule_albedo = EveryCalendarDtSchedule(TimeManager.time_to_period(dt_rad); start_date = date0)\nelse\n    schedule_albedo = TimeManager.NeverSchedule()\nend\nalbedo_cb = TimeManager.Callback(schedule_albedo, FluxCalculator.water_albedo_from_atmosphere!)\n\ncallbacks = (; checkpoint = checkpoint_cb, water_albedo = albedo_cb)","category":"page"},{"location":"generated/amip/run_amip/#Initialize-turbulent-fluxes","page":"AMIP Driver","title":"Initialize turbulent fluxes","text":"","category":"section"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"Decide on the type of turbulent flux partition, partitioned or combined (see FluxCalculator documentation for more details).","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"turbulent_fluxes = nothing\nif turb_flux_partition == \"PartitionedStateFluxes\"\n    turbulent_fluxes = FluxCalculator.PartitionedStateFluxes()\nelseif turb_flux_partition == \"CombinedStateFluxesMOST\"\n    turbulent_fluxes = FluxCalculator.CombinedStateFluxesMOST()\nelse\n    error(\"turb_flux_partition must be either PartitionedStateFluxes or CombinedStateFluxesMOST\")\nend\n\n#= Set up default AMIP diagnostics\nUse ClimaDiagnostics for default AMIP diagnostics, which currently include turbulent energy fluxes.\n=#\nif sim_mode <: AMIPMode && use_coupler_diagnostics\n    include(\"user_io/amip_diagnostics.jl\")\n    coupler_diags_path = joinpath(dir_paths.output, \"coupler\")\n    isdir(coupler_diags_path) || mkpath(coupler_diags_path)\n    amip_diags_handler =\n        amip_diagnostics_setup(coupler_fields, coupler_diags_path, dates.date0[1], tspan[1], calendar_dt)\nelse\n    amip_diags_handler = nothing\nend","category":"page"},{"location":"generated/amip/run_amip/#Initialize-Coupled-Simulation","page":"AMIP Driver","title":"Initialize Coupled Simulation","text":"","category":"section"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"The coupled simulation is initialized here and saved in a global CoupledSimulation struct, cs. It contains all the information required to run the coupled simulation, including the communication context, the dates, the boundary space, the coupler fields, the configuration dictionary, the conservation checks, the time span, the time step, the land fraction, the model simulations, the mode specifics, the callbacks, the directory paths, and diagnostics for AMIP simulations.","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"cs = Interfacer.CoupledSimulation{FT}(\n    comms_ctx,\n    dates,\n    boundary_space,\n    coupler_fields,\n    conservation_checks,\n    [tspan[1], tspan[2]],\n    Œît_cpl,\n    model_sims,\n    mode_specifics,\n    callbacks,\n    dir_paths,\n    turbulent_fluxes,\n    thermo_params,\n    amip_diags_handler,\n);\nUtilities.show_memory_usage()","category":"page"},{"location":"generated/amip/run_amip/#Restart-component-model-states-if-specified","page":"AMIP Driver","title":"Restart component model states if specified","text":"","category":"section"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"If a restart directory is specified and contains output files from the checkpoint_cb callback, the component model states are restarted from those files. The restart directory is specified in the config_dict dictionary. The restart_t field specifies the time step at which the restart is performed.","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"if !isnothing(restart_dir)\n    for sim in cs.model_sims\n        if Checkpointer.get_model_prog_state(sim) !== nothing\n            Checkpointer.restart_model_state!(sim, comms_ctx, restart_t; input_dir = restart_dir)\n        end\n    end\nend","category":"page"},{"location":"generated/amip/run_amip/#Initialize-Component-Model-Exchange","page":"AMIP Driver","title":"Initialize Component Model Exchange","text":"","category":"section"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"We need to ensure all models' initial conditions are shared to enable the coupler to calculate the first instance of surface fluxes. Some auxiliary variables (namely surface humidity and radiation fluxes) depend on initial conditions of other component models than those in which the variables are calculated, which is why we need to step these models in time and/or reinitialize them. The concrete steps for proper initialization are:","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"1.coupler updates surface model area fractions","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"FieldExchanger.update_surface_fractions!(cs)","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"2.surface density (œÅ_sfc): calculated by the coupler by adiabatically extrapolating atmospheric thermal state to the surface. For this, we need to import surface and atmospheric fields. The model sims are then updated with the new surface density.","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"FieldExchanger.import_combined_surface_fields!(cs.fields, cs.model_sims, cs.turbulent_fluxes)\nFieldExchanger.import_atmos_fields!(cs.fields, cs.model_sims, cs.boundary_space, cs.turbulent_fluxes)\nFieldExchanger.update_model_sims!(cs.model_sims, cs.fields, cs.turbulent_fluxes)","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"3.surface vapor specific humidity (q_sfc): step surface models with the new surface density to calculate their respective q_sfc internally","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"# TODO: the q_sfc calculation follows the design of the bucket q_sfc, but it would be neater to abstract this from step! (#331)\nInterfacer.step!(land_sim, tspan[1] + Œît_cpl)\nInterfacer.step!(ocean_sim, tspan[1] + Œît_cpl)\nInterfacer.step!(ice_sim, tspan[1] + Œît_cpl)","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"4.turbulent fluxes: now we have all information needed for calculating the initial turbulent surface fluxes using either the combined state or the partitioned state method","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"if cs.turbulent_fluxes isa FluxCalculator.CombinedStateFluxesMOST\n    # import the new surface properties into the coupler (note the atmos state was also imported in step 3.)\n    FieldExchanger.import_combined_surface_fields!(cs.fields, cs.model_sims, cs.turbulent_fluxes) # i.e. T_sfc, albedo, z0, beta, q_sfc\n    # calculate turbulent fluxes inside the atmos cache based on the combined surface state in each grid box\n    FluxCalculator.combined_turbulent_fluxes!(cs.model_sims, cs.fields, cs.turbulent_fluxes) # this updates the atmos thermo state, sfc_ts\nelseif cs.turbulent_fluxes isa FluxCalculator.PartitionedStateFluxes\n    # calculate turbulent fluxes in surface models and save the weighted average in coupler fields\n    FluxCalculator.partitioned_turbulent_fluxes!(\n        cs.model_sims,\n        cs.fields,\n        cs.boundary_space,\n        FluxCalculator.MoninObukhovScheme(),\n        cs.thermo_params,\n    )\n\n    # update atmos sfc_conditions for surface temperature\n    # TODO: this is hard coded and needs to be simplified (req. CA modification) (#479)\n    new_p = get_new_cache(atmos_sim, cs.fields)\n    CA.SurfaceConditions.update_surface_conditions!(atmos_sim.integrator.u, new_p, atmos_sim.integrator.t) ## sets T_sfc (but SF calculation not necessary - requires split functionality in CA)\n    atmos_sim.integrator.p.precomputed.sfc_conditions .= new_p.precomputed.sfc_conditions\nend","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"5.reinitialize models + radiative flux: prognostic states and time are set to their initial conditions. For atmos, this also triggers the callbacks and sets a nonzero radiation flux (given the new sfc_conditions)","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"FieldExchanger.reinit_model_sims!(cs.model_sims)","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"6.update all fluxes: coupler re-imports updated atmos fluxes (radiative fluxes for both turbulent_fluxes types and also turbulent fluxes if turbulent_fluxes isa CombinedStateFluxesMOST, and sends them to the surface component models. If turbulent_fluxes isa PartitionedStateFluxes atmos receives the turbulent fluxes from the coupler.","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"FieldExchanger.import_atmos_fields!(cs.fields, cs.model_sims, cs.boundary_space, cs.turbulent_fluxes)\nFieldExchanger.update_model_sims!(cs.model_sims, cs.fields, cs.turbulent_fluxes)","category":"page"},{"location":"generated/amip/run_amip/#Coupling-Loop","page":"AMIP Driver","title":"Coupling Loop","text":"","category":"section"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"The coupling loop is the main part of the simulation. It runs the component models sequentially for one coupling timestep (Œît_cpl) at a time, and exchanges combined fields and calculates fluxes using the selected turbulent fluxes option. Note that we want to implement this in a dispatchable function to allow for other forms of timestepping (e.g. leapfrog).","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"function solve_coupler!(cs)\n    (; model_sims, Œît_cpl, tspan, comms_ctx) = cs\n    (; atmos_sim, land_sim, ocean_sim, ice_sim) = model_sims\n\n    @info(\"Starting coupling loop\")\n    # step in time\n    for t in ((tspan[begin] + Œît_cpl):Œît_cpl:tspan[end])","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"Update date","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"        cs.dates.date[] = TimeManager.current_date(cs, t)\n\n        if cs.mode.type <: AMIPMode","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"TODO: get_field with :co2 is not implemented, so this is a little awkward","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"            current_CO2 = zeros(boundary_space)\n            evaluate!(current_CO2, cs.mode.CO2_timevaryinginput, t)\n            Interfacer.update_field!(atmos_sim, Val(:co2), current_CO2)\n        end\n\n        # compute global energy and water conservation checks\n        # (only for slabplanet if tracking conservation is enabled)\n        !isnothing(cs.conservation_checks) && ConservationChecker.check_conservation!(cs)\n        ClimaComms.barrier(comms_ctx)\n\n        # update water albedo from wind at dt_water_albedo\n        # (this will be extended to a radiation callback from the coupler)\n        TimeManager.maybe_trigger_callback(cs.callbacks.water_albedo, cs, t)\n\n        # update the surface fractions for surface models,\n        # and update all component model simulations with the current fluxes stored in the coupler\n        FieldExchanger.update_surface_fractions!(cs)\n        FieldExchanger.update_model_sims!(cs.model_sims, cs.fields, cs.turbulent_fluxes)\n\n        # step component model simulations sequentially for one coupling timestep (Œît_cpl)\n        FieldExchanger.step_model_sims!(cs.model_sims, t)\n\n        # update the coupler with the new surface properties and calculate the turbulent fluxes\n        FieldExchanger.import_combined_surface_fields!(cs.fields, cs.model_sims, cs.turbulent_fluxes) # i.e. T_sfc, surface_albedo, z0, beta\n        if cs.turbulent_fluxes isa FluxCalculator.CombinedStateFluxesMOST\n            FluxCalculator.combined_turbulent_fluxes!(cs.model_sims, cs.fields, cs.turbulent_fluxes) # this updates the surface thermo state, sfc_ts, in ClimaAtmos (but also unnecessarily calculates fluxes)\n        elseif cs.turbulent_fluxes isa FluxCalculator.PartitionedStateFluxes\n            # calculate turbulent fluxes in surfaces and save the weighted average in coupler fields\n            FluxCalculator.partitioned_turbulent_fluxes!(\n                cs.model_sims,\n                cs.fields,\n                cs.boundary_space,\n                FluxCalculator.MoninObukhovScheme(),\n                cs.thermo_params,\n            )\n\n            # update atmos sfc_conditions for surface temperature - TODO: this needs to be simplified (need CA modification)\n            new_p = get_new_cache(atmos_sim, cs.fields)\n            CA.SurfaceConditions.update_surface_conditions!(atmos_sim.integrator.u, new_p, atmos_sim.integrator.t) # to set T_sfc (but SF calculation not necessary - CA modification)\n            atmos_sim.integrator.p.precomputed.sfc_conditions .= new_p.precomputed.sfc_conditions\n        end\n\n        # update the coupler with the new atmospheric properties\n        FieldExchanger.import_atmos_fields!(cs.fields, cs.model_sims, cs.boundary_space, cs.turbulent_fluxes) # radiative and/or turbulent\n\n        # callback to checkpoint model state\n        TimeManager.maybe_trigger_callback(cs.callbacks.checkpoint, cs, t)\n\n        # compute/output AMIP diagnostics if scheduled for this timestep\n        # wrap the current CoupledSimulation fields and time in a NamedTuple to match the ClimaDiagnostics interface\n        cs_nt = (; u = cs.fields, p = nothing, t = t, step = round(t / Œît_cpl))\n        (cs.mode.type <: AMIPMode && !isnothing(cs.amip_diags_handler)) &&\n            CD.orchestrate_diagnostics(cs_nt, cs.amip_diags_handler)\n    end\n    return nothing\nend","category":"page"},{"location":"generated/amip/run_amip/#Precompilation-of-Coupling-Loop","page":"AMIP Driver","title":"Precompilation of Coupling Loop","text":"","category":"section"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"Here we run the entire coupled simulation for two timesteps to precompile everything for accurate timing of the overall simulation. After these two steps, we update the beginning and end of the simulation timespan to the correct values.","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"# run the coupled simulation for two timesteps to precompile\ncs.tspan[2] = tspan[1] + Œît_cpl * 2\nsolve_coupler!(cs)\n\n# update the timespan to the correct values\ncs.tspan[1] = tspan[1] + Œît_cpl * 2\ncs.tspan[2] = tspan[2]\n\n# Run garbage collection before solving for more accurate memory comparison to ClimaAtmos\nGC.gc()","category":"page"},{"location":"generated/amip/run_amip/#Solving-and-Timing-the-Full-Simulation","page":"AMIP Driver","title":"Solving and Timing the Full Simulation","text":"","category":"section"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"This is where the full coupling loop, solve_coupler! is called for the full timespan of the simulation. We use the ClimaComms.@elapsed macro to time the simulation on both CPU and GPU, and use this value to calculate the simulated years per day (SYPD) of the simulation.","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"walltime = ClimaComms.@elapsed comms_ctx.device begin\n    s = CA.@timed_str begin\n        solve_coupler!(cs)\n    end\nend\n@info(walltime)\n\n# Use ClimaAtmos calculation to show the simulated years per day of the simulation (SYPD)\nes = CA.EfficiencyStats(tspan, walltime)\nsypd = CA.simulated_years_per_day(es)\nn_atmos_steps = atmos_sim.integrator.step\nwalltime_per_atmos_step = es.walltime / n_atmos_steps\n@info \"SYPD: $sypd\"\n@info \"Walltime per Atmos step: $(walltime_per_atmos_step)\"\n\n# Save the SYPD and allocation information\nif ClimaComms.iamroot(comms_ctx)\n    open(joinpath(dir_paths.artifacts, \"sypd.txt\"), \"w\") do sypd_filename\n        println(sypd_filename, \"$sypd\")\n    end\n\n    open(joinpath(dir_paths.artifacts, \"walltime_per_atmos_step.txt\"), \"w\") do walltime_per_atmos_step_filename\n        println(walltime_per_atmos_step_filename, \"$(walltime_per_atmos_step)\")\n    end\n\n    open(joinpath(dir_paths.artifacts, \"max_rss_cpu.txt\"), \"w\") do cpu_max_rss_filename\n        cpu_max_rss_GB = Utilities.show_memory_usage()\n        println(cpu_max_rss_filename, cpu_max_rss_GB)\n    end\nend","category":"page"},{"location":"generated/amip/run_amip/#Postprocessing","page":"AMIP Driver","title":"Postprocessing","text":"","category":"section"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"All postprocessing is performed using the root process only, if applicable. Our postprocessing consists of outputting a number of plots to visualize the model output.","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"The postprocessing includes:","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"Energy and water conservation checks (if running SlabPlanet with checks enabled)\nAnimations (if not running in MPI)\nAMIP plots of the final state of the model\nError against observations\nOptional additional atmosphere diagnostics plots\nPlots of useful coupler and component model fields for debugging","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"if ClimaComms.iamroot(comms_ctx)\n    postprocessing_vars = (;\n        plot_diagnostics,\n        use_coupler_diagnostics,\n        output_default_diagnostics,\n        t_end,\n        conservation_softfail,\n        atmos_output_dir,\n    )\n    postprocess_sim(cs.mode.type, cs, postprocessing_vars)\nend","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"","category":"page"},{"location":"generated/amip/run_amip/","page":"AMIP Driver","title":"AMIP Driver","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/sea_breeze/ocean_rhs/#Ocean-Model","page":"Ocean Model","title":"Ocean Model","text":"","category":"section"},{"location":"generated/sea_breeze/ocean_rhs/","page":"Ocean Model","title":"Ocean Model","text":"import DiffEqCallbacks\nimport SciMLBase\nimport ClimaCore as CC\nimport ClimaTimeSteppers as CTS","category":"page"},{"location":"generated/sea_breeze/ocean_rhs/","page":"Ocean Model","title":"Ocean Model","text":"Load coupled simulation code","category":"page"},{"location":"generated/sea_breeze/ocean_rhs/","page":"Ocean Model","title":"Ocean Model","text":"include(\"../CoupledSims/coupled_sim.jl\")","category":"page"},{"location":"generated/sea_breeze/ocean_rhs/#Slab-Ocean-ODE","page":"Ocean Model","title":"Slab Ocean ODE","text":"","category":"section"},{"location":"generated/sea_breeze/ocean_rhs/","page":"Ocean Model","title":"Ocean Model","text":"For our ocean component, we solve a simple slab ocean ODE just as we did for the land:","category":"page"},{"location":"generated/sea_breeze/ocean_rhs/","page":"Ocean Model","title":"Ocean Model","text":"rho_o c_o H_o partial_t T_ocn = - F_integ  Delta t_coupler","category":"page"},{"location":"generated/sea_breeze/ocean_rhs/","page":"Ocean Model","title":"Ocean Model","text":"where rho_o = 1025 kg m ^-3, c_o=3850 J K ^-1 kg ^-1, H_o = 100 m are the density, specific heat and depth of the ocean,\nand F_integ is the integrated surface fluxes in time.","category":"page"},{"location":"generated/sea_breeze/ocean_rhs/#Model-Code","page":"Ocean Model","title":"Model Code","text":"","category":"section"},{"location":"generated/sea_breeze/ocean_rhs/","page":"Ocean Model","title":"Ocean Model","text":"function ocn_rhs!(du, u, (parameters, F_accumulated), t)\n    \"\"\"\n    Slab layer equation\n        d(T_sfc)/dt = - (F_accumulated) / (h_ocn * œÅ_ocn * c_ocn)\n        where\n            F_accumulated = F_integrated / Œît_coupler\n    \"\"\"\n    (; ocn_h, ocn_œÅ, ocn_c) = parameters\n    (; T_sfc) = du\n\n    @. T_sfc = (-F_accumulated) / (ocn_h * ocn_œÅ * ocn_c)\nend\n\n# set up domain\nfunction hspace_1D(xlim = (-œÄ, œÄ), npoly = 0, helem = 10)\n    FT = Float64\n\n    domain =\n        CC.Domains.IntervalDomain(CC.Geometry.XPoint{FT}(xlim[1]) .. CC.Geometry.XPoint{FT}(xlim[2]), periodic = true)\n    mesh = CC.Meshes.IntervalMesh(domain; nelems = helem)\n    topology = CC.Topologies.IntervalTopology(mesh)\n\n    # Finite Volume Approximation: Gauss-Lobatto with 1pt per element\n    quad = CC.Spaces.Quadratures.GL{npoly + 1}()\n    space = CC.Spaces.SpectralElementSpace1D(topology, quad)\n\n    return space\nend\n\n# init simulation\nfunction ocn_init(; xmin = -1000, xmax = 1000, helem = 20, npoly = 0)\n\n    # construct domain spaces - get only surface layer (NB: z should be zero, not z = first central height)\n    space = hspace_1D((xmin, xmax), npoly, helem)\n    coords = CC.Fields.coordinate_field(space)\n    domain = space\n\n    # initial condition\n    T_sfc = map(coords) do coord\n        T_sfc = 257.0\n    end\n\n    # prognostic variable\n    Y = CC.Fields.FieldVector(T_sfc = T_sfc)\n\n    return Y, domain\nend","category":"page"},{"location":"generated/sea_breeze/ocean_rhs/#Coupled-Ocean-Wrappers","page":"Ocean Model","title":"Coupled Ocean Wrappers","text":"","category":"section"},{"location":"generated/sea_breeze/ocean_rhs/","page":"Ocean Model","title":"Ocean Model","text":"# Ocean Simulation - Later to live in Oceananigans\nstruct OceanSim <: AbstractOceanSim\n    integrator::Any\nend\n\nfunction OceanSim(Y_init, t_start, dt, t_end, timestepper, p, saveat, callbacks = DiffEqCallbacks.CallbackSet())\n    ode_algo = CTS.ExplicitAlgorithm(timestepper)\n    ode_function = CTS.ClimaODEFunction(T_exp! = ocn_rhs!)\n\n    problem = SciMLBase.ODEProblem(ode_function, Y_init, (t_start, t_end), p)\n    ocn_integ = SciMLBase.init(problem, ode_algo, dt = dt, saveat = saveat, adaptive = false, callback = callbacks)\n\n    return OceanSim(ocn_integ)\nend\n\nfunction coupler_push!(coupler::CouplerState, ocean::OceanSim)\n    coupler_put!(coupler, :T_sfc_ocean, ocean.integrator.u.T_sfc, ocean)\nend\n\nfunction coupler_pull!(ocean::OceanSim, coupler::CouplerState)\n    coupler_get!(ocean.integrator.p.F_sfc, coupler, :F_sfc, ocean)\n    ocean.integrator.p.F_sfc ./= coupler.Œît_coupled\nend","category":"page"},{"location":"generated/sea_breeze/ocean_rhs/","page":"Ocean Model","title":"Ocean Model","text":"","category":"page"},{"location":"generated/sea_breeze/ocean_rhs/","page":"Ocean Model","title":"Ocean Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"conservation/#Conservation-Checks","page":"Conservation Checks","title":"Conservation Checks","text":"","category":"section"},{"location":"conservation/","page":"Conservation Checks","title":"Conservation Checks","text":"If the model is a physically closed system (e.g., in the slabplanet configuration with free slip conditions), it should conserve mass (including water), energy and momentum. The conservation checker logs global conservation.","category":"page"},{"location":"conservation/","page":"Conservation Checks","title":"Conservation Checks","text":"Only energy and water are currently implemented.","category":"page"},{"location":"conservation/","page":"Conservation Checks","title":"Conservation Checks","text":"Note that kinetic energy is not included in the calculation of the global energy, reflecting the formulation on ClimaAtmos, which assumes that kinetic energy is negligible in comparison with the moist static energy components.","category":"page"},{"location":"conservation/#ConservationChecker-API","page":"Conservation Checks","title":"ConservationChecker API","text":"","category":"section"},{"location":"conservation/","page":"Conservation Checks","title":"Conservation Checks","text":"ClimaCoupler.ConservationChecker.EnergyConservationCheck\nClimaCoupler.ConservationChecker.WaterConservationCheck\nClimaCoupler.ConservationChecker.check_conservation!","category":"page"},{"location":"conservation/#ClimaCoupler.ConservationChecker.EnergyConservationCheck","page":"Conservation Checks","title":"ClimaCoupler.ConservationChecker.EnergyConservationCheck","text":"EnergyConservationCheck{A} <: AbstractConservationCheck\n\nStruct of type AbstractConservationCheck containing global energy conservation logs.\n\n\n\n\n\n","category":"type"},{"location":"conservation/#ClimaCoupler.ConservationChecker.WaterConservationCheck","page":"Conservation Checks","title":"ClimaCoupler.ConservationChecker.WaterConservationCheck","text":"WaterConservationCheck{A} <: AbstractConservationCheck\n\nStruct of type AbstractConservationCheck containing global water mass conservation logs.\n\n\n\n\n\n","category":"type"},{"location":"conservation/#ClimaCoupler.ConservationChecker.check_conservation!","page":"Conservation Checks","title":"ClimaCoupler.ConservationChecker.check_conservation!","text":"check_conservation!(coupler_sim::Interfacer.CoupledSimulation; runtime_check = false)\n\nitertes over all specified conservation checks.\n\n\n\n\n\n    check_conservation!(\n    cc::EnergyConservationCheck,\n    coupler_sim::Interfacer.CoupledSimulation,\n    runtime_check = false,\n    )\n\ncomputes the total energy, ‚à´ œÅe dV, of the model components of the coupled simulations and the TOA radiation, and updates cc with these values.\n\n\n\n\n\ncheck_conservation!(\ncc::WaterConservationCheck,\ncoupler_sim::Interfacer.CoupledSimulation,\nruntime_check = false,\n)\n\ncomputes the total water, ‚à´ œÅq_tot dV, of the various components of the coupled simulations, and updates cc with the values.\n\nNote: in the future this should not use push!.\n\n\n\n\n\n","category":"function"},{"location":"conservation/#ConservationChecker-Internal-Functions","page":"Conservation Checks","title":"ConservationChecker Internal Functions","text":"","category":"section"},{"location":"conservation/","page":"Conservation Checks","title":"Conservation Checks","text":"ClimaCoupler.ConservationChecker.surface_water_gain_from_rates","category":"page"},{"location":"conservation/#ClimaCoupler.ConservationChecker.surface_water_gain_from_rates","page":"Conservation Checks","title":"ClimaCoupler.ConservationChecker.surface_water_gain_from_rates","text":"surface_water_gain_from_rates(cs::Interfacer.CoupledSimulation)\n\nDetermines the total water content gain/loss of a surface from the begining of the simulation based on evaporation and precipitation rates.\n\n\n\n\n\n","category":"function"},{"location":"timemanager/#TimeManager","page":"TimeManager","title":"TimeManager","text":"","category":"section"},{"location":"timemanager/","page":"TimeManager","title":"TimeManager","text":"This module contains functions that handle dates and times in simulations. The functions in this module often call functions from Julia's Dates module.","category":"page"},{"location":"timemanager/#TimeManager-API","page":"TimeManager","title":"TimeManager API","text":"","category":"section"},{"location":"timemanager/","page":"TimeManager","title":"TimeManager","text":"ClimaCoupler.TimeManager.current_date\nClimaCoupler.TimeManager.strdate_to_datetime\nClimaCoupler.TimeManager.datetime_to_strdate\nClimaCoupler.TimeManager.maybe_trigger_callback","category":"page"},{"location":"timemanager/#ClimaCoupler.TimeManager.current_date","page":"TimeManager","title":"ClimaCoupler.TimeManager.current_date","text":"current_date(cs::Interfacer.CoupledSimulation, t::Int)\n\nReturn the model date at the current timestep.\n\nArguments\n\ncs: [CoupledSimulation] containing info about the simulation\nt: [Real] number of seconds since simulation began\n\n\n\n\n\n","category":"function"},{"location":"timemanager/#ClimaCoupler.TimeManager.strdate_to_datetime","page":"TimeManager","title":"ClimaCoupler.TimeManager.strdate_to_datetime","text":"strdate_to_datetime(strdate::String)\n\nConvert from String (\"YYYYMMDD\") to Date format, required by the official AMIP input files.\n\nArguments\n\nstrdate: [String] to be converted to Date type\n\n\n\n\n\n","category":"function"},{"location":"timemanager/#ClimaCoupler.TimeManager.datetime_to_strdate","page":"TimeManager","title":"ClimaCoupler.TimeManager.datetime_to_strdate","text":"datetime_to_strdate(datetime::DateTime)\n\nConvert from Date to String (\"YYYYMMDD\") format.\n\nArguments\n\ndatetime: [Dates.DateTime] object to be converted to string\n\n\n\n\n\n","category":"function"},{"location":"timemanager/#ClimaCoupler.TimeManager.maybe_trigger_callback","page":"TimeManager","title":"ClimaCoupler.TimeManager.maybe_trigger_callback","text":"maybe_trigger_callback(callback, cs, t)\n\nCheck if it time to call callback, if yes, call its function on cs.\n\n\n\n\n\n","category":"function"},{"location":"generated/sea_breeze/atmos_rhs/#Atmospheric-Model","page":"Atmospheric Model","title":"Atmospheric Model","text":"","category":"section"},{"location":"generated/sea_breeze/atmos_rhs/#Atmosphere-Conservation-Equations","page":"Atmospheric Model","title":"Atmosphere Conservation Equations","text":"","category":"section"},{"location":"generated/sea_breeze/atmos_rhs/","page":"Atmospheric Model","title":"Atmospheric Model","text":"Density:","category":"page"},{"location":"generated/sea_breeze/atmos_rhs/","page":"Atmospheric Model","title":"Atmospheric Model","text":"fracpartial rhopartial t + nabla cdot (rho vecu)= S(chi )","category":"page"},{"location":"generated/sea_breeze/atmos_rhs/","page":"Atmospheric Model","title":"Atmospheric Model","text":"Momentum (flux form):","category":"page"},{"location":"generated/sea_breeze/atmos_rhs/","page":"Atmospheric Model","title":"Atmospheric Model","text":"fracpartial rho vecupartial t + nabla cdot (rho vecu otimes vecu + pI)= nabla cdot (rho tau) - rho g + F_B()","category":"page"},{"location":"generated/sea_breeze/atmos_rhs/","page":"Atmospheric Model","title":"Atmospheric Model","text":"Potential temperature:","category":"page"},{"location":"generated/sea_breeze/atmos_rhs/","page":"Atmospheric Model","title":"Atmospheric Model","text":"fracpartial rho thetapartial t + nabla cdot (rho theta vecu) = nabla cdot (kappa rho nabla theta)","category":"page"},{"location":"generated/sea_breeze/atmos_rhs/","page":"Atmospheric Model","title":"Atmospheric Model","text":"Total Energy (possibly replace potential temperature equation with total energy conservation):","category":"page"},{"location":"generated/sea_breeze/atmos_rhs/","page":"Atmospheric Model","title":"Atmospheric Model","text":"fracpartial rho e_totpartial t + nabla cdot ((rho e_tot + p )vecu) = nabla cdot (kappa rho nabla h_tot)","category":"page"},{"location":"generated/sea_breeze/atmos_rhs/","page":"Atmospheric Model","title":"Atmospheric Model","text":"where h_tot is the total specific enthalpy given by internal and potential energy contributions.","category":"page"},{"location":"generated/sea_breeze/atmos_rhs/","page":"Atmospheric Model","title":"Atmospheric Model","text":"Tracer transport:","category":"page"},{"location":"generated/sea_breeze/atmos_rhs/","page":"Atmospheric Model","title":"Atmospheric Model","text":"fracpartial rho chipartial t + nabla cdot (rho chi vecu) = nabla cdot (kappa rho nabla chi) + S(chi )","category":"page"},{"location":"generated/sea_breeze/atmos_rhs/","page":"Atmospheric Model","title":"Atmospheric Model","text":"Diffusion (Constant Viscosity): The simplest model to represent diffusive processes is a constant-viscosity model, with prescribed kinematic viscosity nu such that the stress tensor can be modelled by","category":"page"},{"location":"generated/sea_breeze/atmos_rhs/","page":"Atmospheric Model","title":"Atmospheric Model","text":"rhotau = -2rhonunabla u","category":"page"},{"location":"generated/sea_breeze/atmos_rhs/","page":"Atmospheric Model","title":"Atmospheric Model","text":"Smagorinsky Closure: The Smagorinsky closure is an eddy-viscosity model that captures the effect of energy transfer to the smallest scales of motion in the flow.","category":"page"},{"location":"generated/sea_breeze/atmos_rhs/","page":"Atmospheric Model","title":"Atmospheric Model","text":"beginaligned\nrhotau = -2rhonuvecS \nvecS = frac12((nabla u) + (nabla u)^T) \nnu = (C_sDelta_xyz)^2sqrt2S_ijS_ij\nendaligned","category":"page"},{"location":"generated/sea_breeze/atmos_rhs/","page":"Atmospheric Model","title":"Atmospheric Model","text":"with Delta_xyz the grid lengthscale (sometimes approximated as a geometric average Delta = (Delta_xDelta_yDelta_z)^13), nu is a spatially varying kinematic viscosity that depends on the local shear, vecS the symmetric rate-of-strain tensor, tau the diffusive momentum flux tensor. In stratified flows, we can apply a correction to the eddy viscosity to account for buoyancy effects. Thermal diffusivities are related to the modelled eddy-viscosity through the turbulent Prandtl number which takes a typical value of Pr_t= 13 such that kappa_2 = nuPr_t.","category":"page"},{"location":"generated/sea_breeze/atmos_rhs/","page":"Atmospheric Model","title":"Atmospheric Model","text":"Tendencies for fourth-order hyperdiffusion are included in the rhs! construction, but the coefficient kappa_4 is 0 in this demonstrative case. Hyperdiffusive tendencies are typically included as a scale-selective diffusion mechanism for high-frequency noise (e.g. stabilization in GCMs).","category":"page"},{"location":"generated/sea_breeze/atmos_rhs/","page":"Atmospheric Model","title":"Atmospheric Model","text":"Consider components of the viscous stress tensor in three dimensions:","category":"page"},{"location":"generated/sea_breeze/atmos_rhs/","page":"Atmospheric Model","title":"Atmospheric Model","text":"beginaligned\ntau_xx = 2nu fracpartial upartial x \n\ntau_yy = 2nu fracpartial vpartial y \n\ntau_zz = 2nu fracpartial wpartial z \n\ntau_xy = nu Big(fracpartial upartial y +  fracpartial vpartial xBig) \n\ntau_xz = nu Big(fracpartial upartial z +  fracpartial wpartial xBig) \n\ntau_yz = nu Big(fracpartial vpartial z +  fracpartial wpartial yBig)\nendaligned","category":"page"},{"location":"generated/sea_breeze/atmos_rhs/","page":"Atmospheric Model","title":"Atmospheric Model","text":"Assume terms in the y-direction are neglected (2-dimensional simplicfication). The contributions to the momentum equation are then given by:","category":"page"},{"location":"generated/sea_breeze/atmos_rhs/","page":"Atmospheric Model","title":"Atmospheric Model","text":"beginaligned\n(rho u)  partial_x (rho tau_xx) + partial_z(rhotau_xz)  = partial_x  Big(2nu fracpartial upartial xBig) + partial_zBig(nu fracpartial upartial zBig) + partial_zBig(nu fracpartial wpartial xBig) \n(rho w) partial_x (rho tau_zx)+ partial_z(rhotau_zz)  = partial_xBig(nu fracpartial upartial zBig) +  partial_xBig(nu fracpartial wpartial xBig) + partial_zBig(2nufracpartial wpartial z Big) \nendaligned","category":"page"},{"location":"generated/sea_breeze/atmos_rhs/","page":"Atmospheric Model","title":"Atmospheric Model","text":"Which can be interpreted as, for horizontal-momentum:","category":"page"},{"location":"generated/sea_breeze/atmos_rhs/","page":"Atmospheric Model","title":"Atmospheric Model","text":"Horizontal divergence of vertical gradients of cell-centered variables u\nVertical divergence of vertical gradients of cell-centered variables u\nVertical divergence of horizontal gradients of cell-face variables w","category":"page"},{"location":"generated/sea_breeze/atmos_rhs/","page":"Atmospheric Model","title":"Atmospheric Model","text":"and for vertical-momentum, as:","category":"page"},{"location":"generated/sea_breeze/atmos_rhs/","page":"Atmospheric Model","title":"Atmospheric Model","text":"Horizontal divergence of vertical gradients of cell-centered variables u\nHorizontal divergence of horizontal gradients of cell-face variables w\nVertical divergence of vertical gradients of cell-face variables w.","category":"page"},{"location":"generated/sea_breeze/atmos_rhs/#Model-Code","page":"Atmospheric Model","title":"Model Code","text":"","category":"section"},{"location":"generated/sea_breeze/atmos_rhs/","page":"Atmospheric Model","title":"Atmospheric Model","text":"push!(LOAD_PATH, joinpath(@__DIR__, \"..\", \"..\", \"..\"))\n\nimport LinearAlgebra\nimport SciMLBase\nimport StaticArrays\n\nimport ClimaCore as CC\nimport ClimaCore.Geometry: ‚äó\nimport ClimaComms","category":"page"},{"location":"generated/sea_breeze/atmos_rhs/","page":"Atmospheric Model","title":"Atmospheric Model","text":"Load coupled simulation code","category":"page"},{"location":"generated/sea_breeze/atmos_rhs/","page":"Atmospheric Model","title":"Atmospheric Model","text":"include(\"../CoupledSims/coupled_sim.jl\")\n\n# set up function space\nfunction hvspace_2D(xlim = (-œÄ, œÄ), zlim = (0, 4œÄ), helem = 20, velem = 20, npoly = 1)\n    FT = Float64\n    vertdomain = CC.Domains.IntervalDomain(\n        CC.Geometry.ZPoint{FT}(zlim[1]),\n        CC.Geometry.ZPoint{FT}(zlim[2]);\n        boundary_names = (:bottom, :top),\n    )\n    context = ClimaComms.context()\n    vertmesh = CC.Meshes.IntervalMesh(vertdomain, nelems = velem)\n    if pkgversion(CC) >= v\"0.14.10\"\n        device = ClimaComms.device(context)\n        vert_center_space = CC.Spaces.CenterFiniteDifferenceSpace(device, vertmesh)\n    else\n        vert_center_space = CC.Spaces.CenterFiniteDifferenceSpace(vertmesh)\n    end\n\n    horzdomain =\n        CC.Domains.IntervalDomain(CC.Geometry.XPoint{FT}(xlim[1]), CC.Geometry.XPoint{FT}(xlim[2]), periodic = true)\n    horzmesh = CC.Meshes.IntervalMesh(horzdomain; nelems = helem)\n    horztopology = CC.Topologies.IntervalTopology(horzmesh)\n\n    quad = CC.Spaces.Quadratures.GLL{npoly + 1}()\n    horzspace = CC.Spaces.SpectralElementSpace1D(horztopology, quad)\n\n    hv_center_space = CC.Spaces.ExtrudedFiniteDifferenceSpace(horzspace, vert_center_space)\n    hv_face_space = CC.Spaces.FaceExtrudedFiniteDifferenceSpace(hv_center_space)\n    return (hv_center_space, hv_face_space)\nend\n\nfunction pressure(œÅŒ∏)\n    if œÅŒ∏ >= 0\n        return MSLP * (R_d * œÅŒ∏ / MSLP)^Œ≥\n    else\n        return NaN\n    end\nend\n\nŒ¶(z) = grav * z\n\nabstract type BCtag end\nstruct ZeroFlux <: BCtag end\n\nbc_divF2C_bottom!(::ZeroFlux, dY, Y, p, t) = CC.Operators.SetValue(CC.Geometry.WVector(0.0))\nbc_divF2C_top!(::ZeroFlux, dY, Y, p, t) = CC.Operators.SetValue(CC.Geometry.WVector(0.0))\n\nfunction init_sea_breeze_2d(x, z)\n    Œ∏‚ÇÄ = atm_T_ini\n    cp_d = C_p\n    cv_d = C_v\n    p‚ÇÄ = MSLP\n    g = grav\n    Œ≥ = cp_d / cv_d\n    z_c = 100.0\n    Œ∏_b = atm_T_ini\n    Œ∏_p = z < z_c ? rand() - 0.5 : 0.0 # potential temperature perturbation\n    Œ∏ = Œ∏_b + Œ∏_p # potential temperature\n    œÄ_exn = 1.0 - g * z / cp_d / Œ∏ # exner function\n    T = œÄ_exn * Œ∏ # temperature\n    p = p‚ÇÄ * œÄ_exn^(cp_d / R_d) # pressure\n    œÅ = p / R_d / T # density\n    œÅŒ∏ = œÅ * Œ∏ # potential temperature density\n    return (œÅ = œÅ, œÅŒ∏ = œÅŒ∏, œÅu‚Çï = œÅ * CC.Geometry.UVector(0.0))\nend\n\nfunction atm_rhs!(dY, Y, params, t)\n    œÅw = Y.œÅw\n    Yc = Y.Yc\n    dYc = dY.Yc\n    dœÅw = dY.œÅw\n\n    center_coords = CC.Fields.coordinate_field(axes(Yc))\n\n    # spectral horizontal operators\n    hdiv = CC.Operators.Divergence()\n    hgrad = CC.Operators.Gradient()\n    hwdiv = CC.Operators.WeakDivergence()\n    hwgrad = CC.Operators.WeakGradient()\n\n    # vertical FD operators with BC's\n    vdivf2c = CC.Operators.DivergenceF2C(\n        bottom = CC.Operators.SetValue(CC.Geometry.WVector(0.0)),\n        top = CC.Operators.SetValue(CC.Geometry.WVector(0.0)),\n    )\n    vvdivc2f = CC.Operators.DivergenceC2F(\n        bottom = CC.Operators.SetDivergence(CC.Geometry.WVector(0.0)),\n        top = CC.Operators.SetDivergence(CC.Geometry.WVector(0.0)),\n    )\n    uvdivf2c = CC.Operators.DivergenceF2C(\n        bottom = CC.Operators.SetValue(CC.Geometry.WVector(0.0) ‚äó CC.Geometry.UVector(0.0)),\n        top = CC.Operators.SetValue(CC.Geometry.WVector(0.0) ‚äó CC.Geometry.UVector(0.0)),\n    )\n    If = CC.Operators.InterpolateC2F(bottom = CC.Operators.Extrapolate(), top = CC.Operators.Extrapolate())\n    Ic = CC.Operators.InterpolateF2C()\n    ‚àÇ = CC.Operators.DivergenceF2C(\n        bottom = CC.Operators.SetValue(CC.Geometry.WVector(0.0)),\n        top = CC.Operators.SetValue(CC.Geometry.WVector(0.0)),\n    )\n    ‚àÇf = CC.Operators.GradientC2F()\n    ‚àÇc = CC.Operators.GradientF2C()\n    B = CC.Operators.SetBoundaryOperator(\n        bottom = CC.Operators.SetValue(CC.Geometry.WVector(0.0)),\n        top = CC.Operators.SetValue(CC.Geometry.WVector(0.0)),\n    )\n\n    ‚àá_z_œÅŒ∏ = CC.Operators.DivergenceF2C(\n        bottom = bc_divF2C_bottom!(params.bc.œÅŒ∏.bottom, dY, Y, params, t),\n        top = bc_divF2C_top!(params.bc.œÅŒ∏.top, dY, Y, params, t),\n    )\n\n    u‚Çï = @. Yc.œÅu‚Çï / Yc.œÅ\n    w = @. œÅw / If(Yc.œÅ)\n    wc = @. Ic(œÅw) / Yc.œÅ\n    p = @. pressure(Yc.œÅŒ∏)\n    Œ∏ = @. Yc.œÅŒ∏ / Yc.œÅ\n    YfœÅ = @. If(Yc.œÅ)\n\n    ### HYPERVISCOSITY\n    # 1) compute hyperviscosity coefficients\n    @. dYc.œÅŒ∏ = hwdiv(hgrad(Œ∏))\n    @. dYc.œÅu‚Çï = hwdiv(hgrad(u‚Çï))\n    @. dœÅw = hwdiv(hgrad(w))\n    CC.Spaces.weighted_dss!(dYc)\n    CC.Spaces.weighted_dss!(dœÅw)\n\n    Œ∫‚ÇÑ = 0.0 # m^4/s\n    @. dYc.œÅŒ∏ = -Œ∫‚ÇÑ * hwdiv(Yc.œÅ * hgrad(dYc.œÅŒ∏))\n    @. dYc.œÅu‚Çï = -Œ∫‚ÇÑ * hwdiv(Yc.œÅ * hgrad(dYc.œÅu‚Çï))\n    @. dœÅw = -Œ∫‚ÇÑ * hwdiv(YfœÅ * hgrad(dœÅw))\n\n    # density\n    @. dYc.œÅ = -‚àÇ(œÅw)\n    @. dYc.œÅ -= hdiv(Yc.œÅu‚Çï)\n\n    # potential temperature\n    @. dYc.œÅŒ∏ += -(‚àá_z_œÅŒ∏(œÅw * If(Yc.œÅŒ∏ / Yc.œÅ)))\n    @. dYc.œÅŒ∏ -= hdiv(u‚Çï * Yc.œÅŒ∏)\n\n    # horizontal momentum\n    Ih = Ref(CC.Geometry.Axis2Tensor((CC.Geometry.UAxis(), CC.Geometry.UAxis()), StaticArrays.@SMatrix [1.0]))\n    @. dYc.œÅu‚Çï += -uvdivf2c(œÅw ‚äó If(u‚Çï))\n    @. dYc.œÅu‚Çï -= hdiv(Yc.œÅu‚Çï ‚äó u‚Çï + p * Ih)\n\n    # vertical momentum\n    @. dœÅw += B(\n        CC.Geometry.transform(CC.Geometry.WAxis(), -(‚àÇf(p)) - If(Yc.œÅ) * ‚àÇf(Œ¶(center_coords.z))) - vvdivc2f(Ic(œÅw ‚äó w)),\n    )\n    u‚Çïf = @. If(Yc.œÅu‚Çï / Yc.œÅ) # requires boundary conditions\n    @. dœÅw -= hdiv(u‚Çïf ‚äó œÅw)\n\n    # DIFFUSION\n    Œ∫‚ÇÇ = 5.0 # m^2/s\n    #  1a) horizontal div of horizontal grad of horiz momentun\n    @. dYc.œÅu‚Çï += hwdiv(Œ∫‚ÇÇ * (Yc.œÅ * hgrad(Yc.œÅu‚Çï / Yc.œÅ)))\n    #  1b) vertical div of vertical grad of horiz momentun\n    @. dYc.œÅu‚Çï += uvdivf2c(Œ∫‚ÇÇ * (YfœÅ * ‚àÇf(Yc.œÅu‚Çï / Yc.œÅ)))\n\n    #  1c) horizontal div of horizontal grad of vert momentum\n    @. dœÅw += hwdiv(Œ∫‚ÇÇ * (YfœÅ * hgrad(œÅw / YfœÅ)))\n    #  1d) vertical div of vertical grad of vert momentun\n    @. dœÅw += vvdivc2f(Œ∫‚ÇÇ * (Yc.œÅ * ‚àÇc(œÅw / YfœÅ)))\n\n    #  2a) horizontal div of horizontal grad of potential temperature\n    @. dYc.œÅŒ∏ += hwdiv(Œ∫‚ÇÇ * (Yc.œÅ * hgrad(Yc.œÅŒ∏ / Yc.œÅ)))\n    #  2b) vertical div of vertial grad of potential temperature\n    @. dYc.œÅŒ∏ += ‚àá_z_œÅŒ∏(Œ∫‚ÇÇ * (YfœÅ * ‚àÇf(Yc.œÅŒ∏ / Yc.œÅ)))\n\n    CC.Spaces.weighted_dss!(dYc)\n    CC.Spaces.weighted_dss!(dœÅw)\n    return dY\nend\n\n# init simulation\nfunction atm_init(; xmin = -500, xmax = 500, zmin = 0, zmax = 1000, npoly = 3, helem = 20, velem = 20, bc = nothing)\n\n    # construct domain spaces\n    hv_center_space, hv_face_space = hvspace_2D((xmin, xmax), (zmin, zmax), helem, velem, npoly) # [m]\n    center_coords = CC.Fields.coordinate_field(hv_center_space)\n    face_coords = CC.Fields.coordinate_field(hv_face_space)\n    domain = (hv_center_space = hv_center_space, hv_face_space = hv_face_space)\n\n    # initialize prognostic variables\n    Yc = map(center_coords) do coord\n        sea_breeze = init_sea_breeze_2d(coord.x, coord.z)\n        sea_breeze\n    end\n\n    œÅw = map(face_coords) do coord\n        CC.Geometry.WVector(0.0)\n    end\n\n    Y = CC.Fields.FieldVector(Yc = Yc, œÅw = œÅw)\n\n    # select boundary conditions\n    if bc === nothing\n        bc = (\n            œÅŒ∏ = (bottom = CoupledFlux(), top = ZeroFlux()),\n            œÅu = nothing, # for now BCs are hard coded, except for œÅŒ∏\n        )\n    end\n\n    return Y, bc, domain\nend","category":"page"},{"location":"generated/sea_breeze/atmos_rhs/#Coupled-Atmos-Wrappers","page":"Atmospheric Model","title":"Coupled Atmos Wrappers","text":"","category":"section"},{"location":"generated/sea_breeze/atmos_rhs/","page":"Atmospheric Model","title":"Atmospheric Model","text":"# Atmos Simulation - later to live in ClimaAtmos\nstruct AtmosSim{T} <: AbstractAtmosSim\n    integrator::T\nend\n\nfunction AtmosSim(Y_init, t_start, dt, t_end, timestepper, p, saveat, callbacks = CallbackSet())\n    ode_algo = CTS.ExplicitAlgorithm(timestepper)\n    ode_function = CTS.ClimaODEFunction(T_exp! = atm_rhs!)\n\n    problem = SciMLBase.ODEProblem(ode_function, Y_init, (t_start, t_end), p)\n    atm_integ = SciMLBase.init(\n        problem,\n        ode_algo,\n        dt = dt,\n        saveat = saveat,\n        adaptive = false,\n        progress = true,\n        progress_message = (dt, u, params, t) -> t,\n        callback = callbacks,\n    )\n\n    return AtmosSim(atm_integ)\nend\n\nfunction coupler_push!(coupler::CouplerState, atmos::AtmosSim)\n    coupler_put!(coupler, :F_sfc, atmos.integrator.u.F_sfc, atmos)\nend\n\nfunction coupler_pull!(atmos::AtmosSim, coupler::CouplerState)\n    # reset flux accumulator\n    atmos.integrator.u.F_sfc .= 0.0 # reset surface flux to be accumulated\n\n    T_sfc_ocean = coupler_get(coupler, :T_sfc_ocean, atmos)\n    T_sfc_land = coupler_get(coupler, :T_sfc_land, atmos)\n    atmos.integrator.p.T_sfc .= T_sfc_land .+ T_sfc_ocean\nend","category":"page"},{"location":"generated/sea_breeze/atmos_rhs/#Coupled-Boundary-Conditions","page":"Atmospheric Model","title":"Coupled Boundary Conditions","text":"","category":"section"},{"location":"generated/sea_breeze/atmos_rhs/","page":"Atmospheric Model","title":"Atmospheric Model","text":"The standalone atmosphere model uses two boundary condition methods in its tendency: bc_divF2C_bottom! and bc_divF2C_top!. Since the bottom boundary is coupled, bc_divF2C_bottom! must be altered when running in coupled mode to properly calculate and accumulate the boundary flux from the ocean and land components.","category":"page"},{"location":"generated/sea_breeze/atmos_rhs/","page":"Atmospheric Model","title":"Atmospheric Model","text":"To solve this, a CoupledFlux boundary tag is set for the bottom boundary during initialization. Then, a new method of bc_divF2C_bottom! is written to dispatch on the CoupledFlux boundary tag. This method can then compute the flux appropriately.","category":"page"},{"location":"generated/sea_breeze/atmos_rhs/","page":"Atmospheric Model","title":"Atmospheric Model","text":"struct CoupledFlux <: BCtag end\nfunction bc_divF2C_bottom!(::CoupledFlux, dY, Y, p, t)\n    # flux calculation\n    Yc = Y.Yc\n    u‚Çï = Yc.œÅu‚Çï ./ Yc.œÅ\n    œÅw = Y.œÅw\n    If2c = CC.Operators.InterpolateF2C()\n    Ic2f = CC.Operators.InterpolateC2F(bottom = CC.Operators.Extrapolate(), top = CC.Operators.Extrapolate())\n    w = If2c.(œÅw) ./ Yc.œÅ\n    cuv = @. CC.Geometry.UWVector(u‚Çï)\n    windspeed = @. LinearAlgebra.norm(cuv)\n    windspeed_boundary = CC.Fields.level(windspeed, 1)\n    Œ∏_boundary = CC.Fields.level(Yc.œÅŒ∏ ./ Yc.œÅ, 1)\n    œÅ_boundary = CC.Fields.level(Yc.œÅ, 1)\n\n    # build atmos face fields on surface boundary space to enable broadcasting\n    windspeed_boundary = CC.Fields.Field(CC.Fields.field_values(windspeed_boundary), axes(p.T_sfc))\n    Œ∏_boundary = CC.Fields.Field(CC.Fields.field_values(Œ∏_boundary), axes(p.T_sfc))\n    œÅ_boundary = CC.Fields.Field(CC.Fields.field_values(œÅ_boundary), axes(p.T_sfc))\n\n    Œª = @. p.cpl_p.C_p * p.cpl_p.C_H * œÅ_boundary * windspeed_boundary\n    dŒ∏ = @. Œ∏_boundary - p.T_sfc\n    heat_flux = @. -Œª * dŒ∏\n    @. dY.F_sfc += heat_flux # accumulation\n\n    return CC.Operators.SetValue(CC.Geometry.WVector.(heat_flux))\nend","category":"page"},{"location":"generated/sea_breeze/atmos_rhs/","page":"Atmospheric Model","title":"Atmospheric Model","text":"","category":"page"},{"location":"generated/sea_breeze/atmos_rhs/","page":"Atmospheric Model","title":"Atmospheric Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#ClimaCoupler.jl","page":"Home","title":"ClimaCoupler.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Coupling CliMA Models","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = ClimaCoupler","category":"page"},{"location":"","page":"Home","title":"Home","text":"ClimaCoupler.jl provides a means to couple CliMA  model components. It is designed to provide a flexible way to map boundary fluxes of quantities, like moisture and heat, that leave one component model (for example the atmosphere) to boundary fluxes of another component model (for example the ocean model). Functionality includes:","category":"page"},{"location":"","page":"Home","title":"Home","text":"coupled system time stepping control that integrates fluxes in time for sharing between components with differing time steps and/or time stepping schemes.\nsupport for mapping import and export boundary information between components so that fluxes of properties transferred between components are conserved.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The ClimaCoupler supports coupling components that are all within the same process or coupling components (using MPI) that are running on different processes.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Coupler Scheme)\nClimaCoupler.jl allows for independent development of interchangeable component models.","category":"page"},{"location":"","page":"Home","title":"Home","text":"ClimaCoupler","category":"page"},{"location":"#ClimaCoupler.ClimaCoupler","page":"Home","title":"ClimaCoupler.ClimaCoupler","text":"ClimaCoupler\n\nModule for atmos-ocean-land coupled simulations.\n\n\n\n\n\n","category":"module"}]
}
